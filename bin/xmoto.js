// Generated by CoffeeScript 1.6.3
(function() {
  var Assets, Blocks, Buffer, Camera, Constants, Edges, Entities, Ghost, Ghosts, Infos, Input, LayerOffsets, Level, Limits, Listeners, Math2D, Moto, MotoFlipService, Particles, Physics, Replay, ReplayConversionService, Rider, Script, Sky, Theme, b2AABB, b2Body, b2BodyDef, b2CircleShape, b2DebugDraw, b2EdgeChainDef, b2EdgeShape, b2Fixture, b2FixtureDef, b2MassData, b2MouseJointDef, b2PolygonShape, b2PrismaticJointDef, b2RevoluteJointDef, b2Settings, b2Vec2, b2World, bind_debug_button, bind_delete_params_buttons, block_AABB, create_form_with_url_params, display_constants, edge_AABB, entity_AABB, frame_name, override_constants_by_url_params, physics_values, sort_blocks_by_texture, visible_block, visible_edge, visible_entity;

  b2AABB = Box2D.Collision.b2AABB;

  b2Vec2 = Box2D.Common.Math.b2Vec2;

  Buffer = (function() {
    function Buffer(level) {
      var buffer_html;
      this.level = level;
      buffer_html = "<canvas id=\"buffer\"                           width=\"" + (parseFloat(this.level.canvas.width) * 1.5) + "\"                           height=\"" + (parseFloat(this.level.canvas.height) * 1.5) + "\"                           style=\"display:none\">                   </canvas>";
      $(buffer_html).insertAfter(this.level.options.canvas);
      this.canvas = $("#buffer").get(0);
      this.ctx = this.canvas.getContext('2d');
      this.camera = this.level.camera;
      this.buffer_scale = {
        x: this.camera.scale.x,
        y: this.camera.scale.y
      };
      this.scale = this.camera.scale;
      this.sky = this.level.sky;
      this.limits = this.level.limits;
      this.entities = this.level.entities;
      this.blocks = this.level.blocks;
    }

    Buffer.prototype.init_canvas = function() {
      this.canvas_width = parseFloat(this.canvas.width);
      return this.canvas_height = parseFloat(this.canvas.height);
    };

    Buffer.prototype.redraw_needed = function() {
      var target;
      if (!this.canvas_width) {
        return true;
      }
      if (this.visible) {
        target = this.camera.target();
        if (this.visible.right < target.x + (this.level.canvas_width / 2) / this.scale.x) {
          return true;
        }
        if (this.visible.left > target.x - (this.level.canvas_width / 2) / this.scale.x) {
          return true;
        }
        if (this.visible.top < target.y - (this.level.canvas_height / 2) / this.scale.y) {
          return true;
        }
        if (this.visible.bottom > target.y + (this.level.canvas_height / 2) / this.scale.y) {
          return true;
        }
      }
      return false;
    };

    Buffer.prototype.redraw = function() {
      var target;
      target = this.camera.target();
      if (!this.canvas_width) {
        this.init_canvas();
      }
      this.target_position = {
        x: target.x,
        y: target.y
      };
      this.buffer_scale = {
        x: this.scale.x > Constants.default_scale.x ? Constants.default_scale.x : this.scale.x,
        y: this.scale.y < Constants.default_scale.y ? Constants.default_scale.y : this.scale.y
      };
      this.compute_visibility();
      this.ctx.clearRect(0, 0, this.canvas_width, this.canvas_height);
      this.ctx.save();
      this.ctx.translate(this.canvas_width / 2, this.canvas_height / 2);
      this.ctx.scale(this.buffer_scale.x, this.buffer_scale.y);
      this.ctx.translate(-target.x, -target.y - 0.25);
      this.limits.display(this.ctx);
      this.entities.display_sprites(this.ctx);
      this.blocks.display(this.ctx);
      return this.ctx.restore();
    };

    Buffer.prototype.compute_visibility = function() {
      var target;
      target = this.camera.target();
      this.visible = {
        left: target.x - (this.canvas_width / 2) / this.buffer_scale.x,
        right: target.x + (this.canvas_width / 2) / this.buffer_scale.x,
        bottom: target.y + (this.canvas_height / 2) / this.buffer_scale.y,
        top: target.y - (this.canvas_height / 2) / this.buffer_scale.y
      };
      this.visible.aabb = new b2AABB();
      this.visible.aabb.lowerBound.Set(this.visible.left, this.visible.bottom);
      return this.visible.aabb.upperBound.Set(this.visible.right, this.visible.top);
    };

    Buffer.prototype.display = function() {
      var buffer_center_x, buffer_center_y, canvas_center_x, canvas_center_y, clipped_height, clipped_width, margin_zoom_x, margin_zoom_y, target, translate_x, translate_y;
      target = this.camera.target();
      buffer_center_x = this.canvas_width / 2;
      canvas_center_x = this.level.canvas_width / 2;
      translate_x = (target.x - this.target_position.x) * this.buffer_scale.x;
      clipped_width = this.level.canvas_width / (this.scale.x / this.buffer_scale.x);
      margin_zoom_x = (this.level.canvas_width - clipped_width) / 2;
      buffer_center_y = this.canvas_height / 2;
      canvas_center_y = this.level.canvas_height / 2;
      translate_y = (target.y - this.target_position.y) * this.buffer_scale.y;
      clipped_height = this.level.canvas_height / (this.scale.y / this.buffer_scale.y);
      margin_zoom_y = (this.level.canvas_height - clipped_height) / 2;
      return this.level.ctx.drawImage(this.canvas, buffer_center_x - canvas_center_x + translate_x + margin_zoom_x, buffer_center_y - canvas_center_y + translate_y + margin_zoom_y, clipped_width, clipped_height, 0, 0, this.level.canvas_width, this.level.canvas_height);
    };

    return Buffer;

  })();

  Camera = (function() {
    function Camera(level) {
      this.level = level;
      this.scale = {
        x: Constants.default_scale.x,
        y: Constants.default_scale.y
      };
      this.offset = {
        x: 0,
        y: 0
      };
    }

    Camera.prototype.init = function() {
      if (Constants.manual_scale) {
        return this.init_scroll();
      }
    };

    Camera.prototype.move = function() {
      var speed, velocity;
      velocity = this.level.moto.body.GetLinearVelocity();
      if (Constants.automatic_scale) {
        speed = Math2D.distance_between_points(new b2Vec2(0, 0), velocity);
        this.scale.x = this.scale.x * 0.995 + (Constants.default_scale.x / (1.0 + speed / 7.5)) * 0.005;
        this.scale.y = this.scale.y * 0.995 + (Constants.default_scale.y / (1.0 + speed / 7.5)) * 0.005;
        this.offset.x = this.offset.x * 0.97 + velocity.x / 3.0 * 0.03;
        return this.offset.y = this.offset.y * 0.99 + velocity.y / 3.0 * 0.01;
      }
    };

    Camera.prototype.target = function() {
      var adjusted_position, options, position;
      options = this.level.options;
      if (this.level.ghosts.player && this.level.ghosts.player.replay) {
        position = this.level.ghosts.player.moto.body.GetPosition();
      } else if (options.replay_mode) {
        position = this.level.ghosts.replay.moto.body.GetPosition();
      } else {
        position = this.level.moto.body.GetPosition();
      }
      return adjusted_position = {
        x: position.x + this.offset.x,
        y: position.y + this.offset.y
      };
    };

    Camera.prototype.init_scroll = function() {
      var canvas, scroll,
        _this = this;
      scroll = function(event) {
        var delta, max_limit_x, max_limit_y, min_limit_x, min_limit_y;
        if (event.wheelDelta) {
          delta = event.wheelDelta / 40;
        } else if (event.detail) {
          delta = -event.detail;
        } else {
          delta = 0;
        }
        _this.scale.x += (_this.scale.x / 200) * delta;
        _this.scale.y += (_this.scale.y / 200) * delta;
        min_limit_x = Constants.default_scale.x / 2;
        min_limit_y = Constants.default_scale.y / 2;
        max_limit_x = Constants.default_scale.x * 2;
        max_limit_y = Constants.default_scale.y * 2;
        if (_this.scale.x < min_limit_x) {
          _this.scale.x = min_limit_x;
        }
        if (_this.scale.y > min_limit_y) {
          _this.scale.y = min_limit_y;
        }
        if (_this.scale.x > max_limit_x) {
          _this.scale.x = max_limit_x;
        }
        if (_this.scale.y < max_limit_y) {
          _this.scale.y = max_limit_y;
        }
        return event.preventDefault() && false;
      };
      canvas = $(this.level.options.canvas).get(0);
      canvas.addEventListener('DOMMouseScroll', scroll, false);
      return canvas.addEventListener('mousewheel', scroll, false);
    };

    return Camera;

  })();

  b2Vec2 = Box2D.Common.Math.b2Vec2;

  Constants = (function() {
    function Constants() {}

    Constants.debug = false;

    Constants.hooking = false;

    Constants.gravity = 9.81;

    Constants.max_moto_speed = 70.00;

    Constants.air_density = 0.03;

    Constants.moto_acceleration = 9.00;

    Constants.biker_force = 11.00;

    Constants.fps = 60.0;

    Constants.automatic_scale = true;

    Constants.manual_scale = true;

    Constants.default_scale = {
      x: 70.0,
      y: -70.0
    };

    Constants.body = {
      density: 1.5,
      restitution: 0.5,
      friction: 1.0,
      position: {
        x: 0.0,
        y: 1.0
      },
      shape: [new b2Vec2(0.4, -0.3), new b2Vec2(0.50, 0.40), new b2Vec2(-0.75, 0.16), new b2Vec2(-0.35, -0.3)],
      collisions: true,
      texture: 'playerbikerbody',
      ghost_texture: 'ghostbikerbody',
      texture_size: {
        x: 2.0,
        y: 1.0
      }
    };

    Constants.left_wheel = {
      radius: 0.35,
      density: 1.8,
      restitution: 0.3,
      friction: 1.4,
      position: {
        x: -0.70,
        y: 0.48
      },
      collisions: true,
      texture: 'playerbikerwheel',
      ghost_texture: 'ghostbikerwheel'
    };

    Constants.right_wheel = {
      radius: 0.35,
      density: 1.8,
      restitution: 0.3,
      friction: 1.4,
      position: {
        x: 0.70,
        y: 0.48
      },
      collisions: true,
      texture: 'playerbikerwheel',
      ghost_texture: 'ghostbikerwheel'
    };

    Constants.left_axle = {
      density: 1.0,
      restitution: 0.5,
      friction: 1.0,
      position: {
        x: 0.0,
        y: 1.0
      },
      shape: [new b2Vec2(-0.10, -0.30), new b2Vec2(-0.25, -0.30), new b2Vec2(-0.80, -0.58), new b2Vec2(-0.65, -0.58)],
      collisions: true,
      texture: 'rear1',
      ghost_texture: 'rear_ghost'
    };

    Constants.right_axle = {
      density: 1.5,
      restitution: 0.5,
      friction: 1.0,
      position: {
        x: 0.0,
        y: 1.0
      },
      shape: [new b2Vec2(0.58, -0.02), new b2Vec2(0.48, -0.02), new b2Vec2(0.66, -0.58), new b2Vec2(0.76, -0.58)],
      collisions: true,
      texture: 'front1',
      ghost_texture: 'front_ghost'
    };

    Constants.head = {
      density: 0.4,
      restitution: 0.0,
      friction: 1.0,
      position: {
        x: -0.27,
        y: 2.26
      },
      radius: 0.18,
      collisions: true
    };

    Constants.torso = {
      density: 0.4,
      restitution: 0.0,
      friction: 1.0,
      position: {
        x: -0.31,
        y: 1.89
      },
      angle: -Math.PI / 30.0,
      shape: [new b2Vec2(0.10, -0.55), new b2Vec2(0.13, 0.15), new b2Vec2(-0.20, 0.22), new b2Vec2(-0.18, -0.55)],
      collisions: true,
      texture: 'playertorso',
      ghost_texture: 'ghosttorso',
      texture_size: {
        x: 0.50,
        y: 1.20
      }
    };

    Constants.lower_leg = {
      density: 0.4,
      restitution: 0.0,
      friction: 1.0,
      position: {
        x: 0.07,
        y: 0.90
      },
      angle: -Math.PI / 6.0,
      shape: [new b2Vec2(0.2, -0.33), new b2Vec2(0.2, -0.27), new b2Vec2(0.00, -0.2), new b2Vec2(0.02, 0.33), new b2Vec2(-0.17, 0.33), new b2Vec2(-0.14, -0.33)],
      collisions: true,
      texture: 'playerlowerleg',
      ghost_texture: 'ghostlowerleg',
      texture_size: {
        x: 0.40,
        y: 0.66
      }
    };

    Constants.upper_leg = {
      density: 0.4,
      restitution: 0.0,
      friction: 1.0,
      position: {
        x: -0.15,
        y: 1.27
      },
      angle: -Math.PI / 11.0,
      shape: [new b2Vec2(0.4, -0.14), new b2Vec2(0.4, 0.07), new b2Vec2(-0.4, 0.14), new b2Vec2(-0.4, -0.08)],
      collisions: true,
      texture: 'playerupperleg',
      ghost_texture: 'ghostupperleg',
      texture_size: {
        x: 0.78,
        y: 0.28
      }
    };

    Constants.lower_arm = {
      density: 0.4,
      restitution: 0.0,
      friction: 1.0,
      position: {
        x: 0.07,
        y: 1.54
      },
      angle: -Math.PI / 10.0,
      shape: [new b2Vec2(0.28, -0.07), new b2Vec2(0.28, 0.04), new b2Vec2(-0.30, 0.07), new b2Vec2(-0.30, -0.06)],
      collisions: true,
      texture: 'playerlowerarm',
      ghost_texture: 'ghostlowerarm',
      texture_size: {
        x: 0.53,
        y: 0.20
      }
    };

    Constants.upper_arm = {
      density: 0.4,
      restitution: 0.0,
      friction: 1.0,
      position: {
        x: -0.20,
        y: 1.85
      },
      angle: Math.PI / 10.0,
      shape: [new b2Vec2(0.09, -0.29), new b2Vec2(0.09, 0.22), new b2Vec2(-0.11, 0.26), new b2Vec2(-0.10, -0.29)],
      collisions: true,
      texture: 'playerupperarm',
      ghost_texture: 'ghostupperarm',
      texture_size: {
        x: 0.24,
        y: 0.56
      }
    };

    Constants.left_suspension = {
      angle: new b2Vec2(0, 1),
      lower_translation: -0.03,
      upper_translation: 0.20,
      back_force: 3.00,
      rigidity: 8.00
    };

    Constants.right_suspension = {
      angle: new b2Vec2(-0.2, 1),
      lower_translation: -0.01,
      upper_translation: 0.20,
      back_force: 3.00,
      rigidity: 4.00
    };

    Constants.ankle = {
      axe_position: {
        x: -0.18,
        y: -0.2
      }
    };

    Constants.wrist = {
      axe_position: {
        x: 0.25,
        y: -0.07
      }
    };

    Constants.knee = {
      axe_position: {
        x: 0.12,
        y: 0.28
      }
    };

    Constants.elbow = {
      axe_position: {
        x: 0.03,
        y: -0.21
      }
    };

    Constants.shoulder = {
      axe_position: {
        x: -0.12,
        y: 0.22
      }
    };

    Constants.hip = {
      axe_position: {
        x: -0.25,
        y: 0.14
      }
    };

    Constants.ground = {
      density: 1.0,
      restitution: 0.2,
      friction: 1.2
    };

    Constants.chain_reaction = function() {
      var element, _i, _len, _ref, _results;
      if (this.hooking === true) {
        _ref = ['body', 'left_axle', 'right_axle', 'torso', 'lower_leg', 'upper_leg', 'lower_arm', 'upper_arm'];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          _results.push(Constants[element].collisions = false);
        }
        return _results;
      }
    };

    Constants.chain_reaction();

    return Constants;

  })();

  Input = (function() {
    function Input(level) {
      this.level = level;
      this.assets = level.assets;
      this.up = false;
      this.down = false;
      this.left = false;
      this.right = false;
      this.space = false;
    }

    Input.prototype.init = function() {
      this.disable_scroll();
      return this.init_keyboard();
    };

    Input.prototype.disable_scroll = function() {
      var keydown, keys, preventDefault;
      keys = [37, 38, 39, 40, 32];
      preventDefault = function(e) {
        e = e || window.event;
        if (e.preventDefault) {
          return e.preventDefault();
        } else {
          return e.returnValue = false;
        }
      };
      keydown = function(e) {
        var i, _i, _len;
        for (_i = 0, _len = keys.length; _i < _len; _i++) {
          i = keys[_i];
          if (e.keyCode === i) {
            preventDefault(e);
            return;
          }
        }
      };
      return document.onkeydown = keydown;
    };

    Input.prototype.init_keyboard = function() {
      var _this = this;
      $(document).off('keydown');
      $(document).on('keydown', function(event) {
        var url;
        switch (event.which || event.keyCode) {
          case 38:
            return _this.up = true;
          case 40:
            return _this.down = true;
          case 37:
            return _this.left = true;
          case 39:
            return _this.right = true;
          case 32:
            return _this.space = true;
          case 13:
            return _this.level.need_to_restart = true;
          case 69:
            if (!$('input').is(':focus')) {
              return _this.level.moto.rider.eject();
            }
            break;
          case 67:
            url = document.URL;
            url = url.substr(url.length - 1) !== '/' ? "" + url + "/capture" : "" + url + "capture";
            return $.post(url, {
              steps: _this.level.physics.steps,
              image: $(_this.level.options.canvas)[0].toDataURL()
            }).done(function() {
              return alert("Capture uploaded");
            }).fail(function() {
              return alert("Capture failed");
            });
        }
      });
      return $(document).on('keyup', function(event) {
        switch (event.which || event.keyCode) {
          case 38:
            return _this.up = false;
          case 40:
            return _this.down = false;
          case 37:
            return _this.left = false;
          case 39:
            return _this.right = false;
        }
      });
    };

    return Input;

  })();

  b2AABB = Box2D.Collision.b2AABB;

  b2Vec2 = Box2D.Common.Math.b2Vec2;

  Level = (function() {
    function Level(options) {
      this.options = options;
      this.canvas = $(this.options.canvas).get(0);
      this.ctx = this.canvas.getContext('2d');
      this.assets = new Assets();
      this.physics = new Physics(this);
      this.input = new Input(this);
      this.camera = new Camera(this);
      this.listeners = new Listeners(this);
      this.replay = new Replay(this);
      this.ghosts = new Ghosts(this);
      this.moto = new Moto(this);
      this.particles = new Particles(this);
      this.infos = new Infos(this);
      this.sky = new Sky(this);
      this.blocks = new Blocks(this);
      this.limits = new Limits(this);
      this.layer_offsets = new LayerOffsets(this);
      this.script = new Script(this);
      this.entities = new Entities(this);
      this.buffer = new Buffer(this);
    }

    Level.prototype.load_from_file = function(file_name) {
      return $.ajax({
        type: "GET",
        url: "" + this.options.levels_path + "/" + file_name,
        dataType: "xml",
        success: this.load_level,
        async: false,
        context: this
      });
    };

    Level.prototype.load_level = function(xml) {
      this.infos.parse(xml).init();
      this.sky.parse(xml).init();
      this.blocks.parse(xml).init();
      this.limits.parse(xml).init();
      this.layer_offsets.parse(xml).init();
      this.script.parse(xml).init();
      this.entities.parse(xml).init();
      this.moto.init();
      this.ghosts.init();
      this.input.init();
      this.camera.init();
      return this.listeners.init();
    };

    Level.prototype.init_canvas = function() {
      this.canvas_width = parseFloat(this.canvas.width);
      return this.canvas_height = parseFloat(this.canvas.height);
    };

    Level.prototype.display = function() {
      if (!this.canvas_width) {
        this.init_canvas();
      }
      if (!this.moto.dead) {
        this.update_timer();
      }
      this.compute_visibility();
      this.sky.display();
      if (this.buffer.redraw_needed()) {
        this.buffer.redraw();
      }
      this.buffer.display();
      this.ctx.save();
      this.ctx.translate(this.canvas_width / 2, this.canvas_height / 2);
      this.ctx.scale(this.camera.scale.x, this.camera.scale.y);
      this.ctx.translate(-this.camera.target().x, -this.camera.target().y - 0.25);
      this.entities.display_items();
      this.moto.display();
      this.ghosts.display();
      this.particles.display();
      if (Constants.debug) {
        this.physics.display();
      }
      return this.ctx.restore();
    };

    Level.prototype.update_timer = function(update_now) {
      var cents, minutes, new_time, seconds;
      if (update_now == null) {
        update_now = false;
      }
      new_time = new Date().getTime() - this.start_time;
      if (update_now || Math.floor(new_time / 10) > Math.floor(this.current_time / 10)) {
        minutes = Math.floor(new_time / 1000 / 60);
        seconds = Math.floor(new_time / 1000) % 60;
        if (seconds < 10) {
          seconds = "0" + seconds;
        }
        cents = Math.floor(new_time / 10) % 100;
        if (cents < 10) {
          cents = "0" + cents;
        }
        $(this.options.chrono).text("" + minutes + ":" + seconds + ":" + cents);
      }
      return this.current_time = new_time;
    };

    Level.prototype.compute_visibility = function() {
      this.visible = {
        left: this.camera.target().x - (this.canvas_width / 2) / this.camera.scale.x,
        right: this.camera.target().x + (this.canvas_width / 2) / this.camera.scale.x,
        bottom: this.camera.target().y + (this.canvas_height / 2) / this.camera.scale.y,
        top: this.camera.target().y - (this.canvas_height / 2) / this.camera.scale.y
      };
      this.visible.aabb = new b2AABB();
      this.visible.aabb.lowerBound.Set(this.visible.left, this.visible.bottom);
      return this.visible.aabb.upperBound.Set(this.visible.right, this.visible.top);
    };

    Level.prototype.got_strawberries = function() {
      var strawberry, _i, _len, _ref;
      _ref = this.entities.strawberries;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        strawberry = _ref[_i];
        if (strawberry.display) {
          return false;
        }
      }
      return true;
    };

    Level.prototype.restart = function() {
      var entity, _i, _len, _ref, _results;
      this.replay = new Replay(this);
      this.ghosts.reload();
      this.moto.destroy();
      this.moto = new Moto(this);
      this.moto.init();
      this.start_time = new Date().getTime();
      this.current_time = 0;
      this.update_timer(true);
      _ref = this.entities.strawberries;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        _results.push(entity.display = true);
      }
      return _results;
    };

    return Level;

  })();

  Listeners = (function() {
    function Listeners(level) {
      this.level = level;
      this.assets = level.assets;
      this.world = level.physics.world;
    }

    Listeners.prototype.init = function() {
      var listener,
        _this = this;
      listener = new Box2D.Dynamics.b2ContactListener;
      listener.BeginContact = function(contact) {
        var a, b, entity, moto, strawberry;
        moto = _this.level.moto;
        a = contact.GetFixtureA().GetBody().GetUserData();
        b = contact.GetFixtureB().GetBody().GetUserData();
        if (!moto.dead) {
          if (Listeners.does_contact_moto_rider(a, b, 'strawberry')) {
            strawberry = a === 'strawberry' ? contact.GetFixtureA() : contact.GetFixtureB();
            entity = strawberry.GetBody().GetUserData().entity;
            if (entity.display) {
              return entity.display = false;
            }
          } else if (Listeners.does_contact_moto_rider(a, b, 'end_of_level') && !_this.level.need_to_restart) {
            if (_this.level.got_strawberries()) {
              if (a.name === 'rider' ||  b.name === 'rider') {
                moto = a.name === 'rider' ? a.rider.moto : b.rider.moto;
              } else {
                moto = a.name === 'moto' ? a.moto : b.moto;
              }
              return _this.trigger_restart(moto);
            }
          } else if (Constants.hooking === false && Listeners.does_contact(a, b, 'rider', 'ground') && a.part !== 'lower_leg' && b.part !== 'lower_leg') {
            moto = a.name === 'rider' ? a.rider.moto : b.rider.moto;
            return _this.kill_moto(moto);
          } else if (Constants.hooking === true && Listeners.does_contact(a, b, 'rider', 'ground') && (a.part === 'head' || b.part === 'head')) {
            moto = a.name === 'rider' ? a.rider.moto : b.rider.moto;
            return _this.kill_moto(moto);
          } else if (Listeners.does_contact_moto_rider(a, b, 'wrecker')) {
            if (a.name === 'rider' ||  b.name === 'rider') {
              moto = a.name === 'rider' ? a.rider.moto : b.rider.moto;
            } else {
              moto = a.name === 'moto' ? a.moto : b.moto;
            }
            return _this.kill_moto(moto);
          }
        }
      };
      return this.world.SetContactListener(listener);
    };

    Listeners.does_contact_moto_rider = function(a, b, obj) {
      return Listeners.does_contact(a, b, obj, 'rider') || Listeners.does_contact(a, b, obj, 'moto');
    };

    Listeners.does_contact = function(a, b, obj1, obj2) {
      return (a.name === obj1 && b.name === obj2) || (a.name === obj2 && b.name === obj1);
    };

    Listeners.prototype.trigger_restart = function(moto) {
      if (!moto.ghost) {
        this.level.replay.success = true;
        return this.level.need_to_restart = true;
      }
    };

    Listeners.prototype.kill_moto = function(moto) {
      if (!moto.dead) {
        moto.dead = true;
        this.world.DestroyJoint(moto.rider.ankle_joint);
        this.world.DestroyJoint(moto.rider.wrist_joint);
        moto.rider.shoulder_joint.m_enableLimit = false;
        moto.rider.knee_joint.m_lowerAngle = moto.rider.knee_joint.m_lowerAngle * 3;
        moto.rider.elbow_joint.m_upperAngle = moto.rider.elbow_joint.m_upperAngle * 3;
        return moto.rider.hip_joint.m_lowerAngle = moto.rider.hip_joint.m_lowerAngle * 3;
      }
    };

    return Listeners;

  })();

  window.debug1 = "";

  window.debug2 = "";

  $.xmoto = function(level_filename, options) {
    var initialize, level;
    if (options == null) {
      options = {};
    }
    initialize = function(options) {
      var defaults;
      defaults = {
        canvas: '#xmoto',
        loading: '#loading',
        chrono: '#chrono',
        best_score_file: "K4Bw+gJg9g7gdgLgIwFYA0qCcaBMe0DM+AHAGzrHEAsGSSOtKSGOV6SVSxGKBzSpehlKYaXAAziMmIriTiGeKqVxtuOUlUXlFAdiIAfUGFDI0ulTiQFcBKcQI1iu7sUzY6VG3WINr49ipifhRRYQIPXSpdDEopJExSGytg2wVcFFIYjTZcUmJ0HHcqA2h4SFhEBMwkUsqTEDNq3QMAGwBTADMAFwr4ZF5YhjthxzRScRpSHBticRUybnp56S45cXVWbKoA1UGc5N1dPQtcOctqdTJs5yvMbMwNNq7e034JuWHxbCotcflxnY0A4GM4xFZ2DIpFYNLgcCh1Fpth8NA5cEcaDgXIpgldMmd9GcarhMLsigRSAYAE4ASwA5gALXplRBY9DRKRUGTmKIYDb8CQsfH0agYHbeZRiULeETsY78YJia5pbAzIGo1W6Ojo/BYwQkiIkzTU+lMhpmHC+NBBBhMBguAXiAVhei6eJFJZaPzRPyCMRumJIfQKw1cFy2XUEBHolZYoM67IWVWiZNugwAZxAAEMAMbtMAgKntdPp9oQBA1PyUAhAA\",
        best_score_steps: 99999999999,
        best_score_ghost: true,
        replays: [],
        replay_mode: false,
        replay_file: '',
        zoom: Constants.default_scale.x,
        levels_path: '/data/Levels',
        scores_path: '/level_user_links',
        replays_path: '/data/Replays'
      };
      return $.extend(defaults, options);
    };
    options = initialize(options);
    Constants.default_scale = {
      x: options.zoom,
      y: -options.zoom
    };
    $(options.loading).show();
    level = new Level(options);
    level.load_from_file(level_filename);
    return level.assets.load(function() {
      var update;
      update = function() {
        level.physics.update();
        level.display();
        return window.game_loop = window.requestAnimationFrame(update);
      };
      level.start_time = new Date().getTime();
      level.current_time = 0;
      level.physics.init();
      window.cancelAnimationFrame(window.game_loop);
      $(options.loading).hide();
      return update();
    });
  };

  b2World = Box2D.Dynamics.b2World;

  b2Vec2 = Box2D.Common.Math.b2Vec2;

  b2AABB = Box2D.Collision.b2AABB;

  b2BodyDef = Box2D.Dynamics.b2BodyDef;

  b2Body = Box2D.Dynamics.b2Body;

  b2FixtureDef = Box2D.Dynamics.b2FixtureDef;

  b2Fixture = Box2D.Dynamics.b2Fixture;

  b2MassData = Box2D.Collision.Shapes.b2MassData;

  b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape;

  b2CircleShape = Box2D.Collision.Shapes.b2CircleShape;

  b2EdgeShape = Box2D.Collision.Shapes.b2EdgeShape;

  b2EdgeChainDef = Box2D.Collision.Shapes.b2EdgeChainDef;

  b2DebugDraw = Box2D.Dynamics.b2DebugDraw;

  b2MouseJointDef = Box2D.Dynamics.Joints.b2MouseJointDef;

  b2Settings = Box2D.Common.b2Settings;

  Physics = (function() {
    function Physics(level) {
      var debugDraw;
      this.level = level;
      this.world = new b2World(new b2Vec2(0, -Constants.gravity), true);
      b2Settings.b2_linearSlop = 0.0025;
      debugDraw = new b2DebugDraw();
      debugDraw.SetSprite(this.level.ctx);
      this.level.ctx.lineWidth = 0.05;
      debugDraw.SetFillAlpha(0.5);
      debugDraw.m_sprite.graphics.clear = function() {};
      debugDraw.SetFlags(b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit);
      this.world.SetDebugDraw(debugDraw);
      this.world;
    }

    Physics.prototype.init = function() {
      this.last_step = new Date().getTime();
      this.step = 1000.0 / Constants.fps;
      return this.steps = 0;
    };

    Physics.prototype.restart = function() {
      var player_ghost, replay, time;
      replay = this.level.replay;
      player_ghost = this.level.ghosts.player;
      if (replay.success) {
        time = (replay.steps / 60.0).toFixed(2).replace('.', ':');
        if ((!player_ghost.replay) || player_ghost.replay.steps > replay.steps) {
          console.log("WIN : you improved your personal score : " + time + " (" + replay.steps + " steps)");
          this.save_replay_and_init_ghosts(replay);
        } else {
          console.log("FAIL : you didn't improve your personal score : " + time + " (" + replay.steps + " steps)");
          this.save_replay_and_init_ghosts(replay);
        }
      }
      this.level.restart();
      return this.init();
    };

    Physics.prototype.save_replay_and_init_ghosts = function(replay) {
      replay.add_step();
      replay.save();
      this.level.ghosts.player = new Ghost(this.level, replay.clone());
      return this.level.ghosts.init();
    };

    Physics.prototype.update = function() {
      var _results;
      _results = [];
      while ((new Date()).getTime() - this.last_step > this.step) {
        this.steps = this.steps + 1;
        this.last_step += this.step;
        if (!this.level.moto.dead && !this.level.ghosts.player.replay) {
          window.debug1 += "" + this.level.physics.steps + " - " + (this.level.input.up ? 1 : 0) + " " + (this.level.input.down ? 1 : 0) + " " + (this.level.input.left ? 1 : 0) + " " + (this.level.input.right ? 1 : 0) + " " + (this.level.input.space ? 1 : 0) + "\n";
        }
        this.level.moto.move();
        this.level.ghosts.move();
        this.level.replay.add_step();
        this.level.camera.move();
        this.world.Step(1.0 / Constants.fps, 10, 10);
        this.world.ClearForces();
        this.level.input.space = false;
        if (this.level.need_to_restart) {
          this.restart();
          _results.push(this.level.need_to_restart = false);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Physics.prototype.display = function() {
      return this.world.DrawDebugData();
    };

    Physics.prototype.create_polygon = function(vertices, name, density, restitution, friction, group_index) {
      var bodyDef, fixDef;
      if (density == null) {
        density = 1.0;
      }
      if (restitution == null) {
        restitution = 0.5;
      }
      if (friction == null) {
        friction = 1.0;
      }
      if (group_index == null) {
        group_index = -2;
      }
      fixDef = new b2FixtureDef();
      fixDef.shape = new b2PolygonShape();
      fixDef.density = density;
      fixDef.restitution = restitution;
      fixDef.friction = friction;
      fixDef.filter.groupIndex = group_index;
      Physics.create_shape(fixDef, vertices);
      bodyDef = new b2BodyDef();
      bodyDef.position.x = 0;
      bodyDef.position.y = 0;
      bodyDef.userData = {
        name: name
      };
      bodyDef.type = b2Body.b2_staticBody;
      return this.world.CreateBody(bodyDef).CreateFixture(fixDef);
    };

    Physics.prototype.create_lines = function(block, name, density, restitution, friction, group_index) {
      var body, bodyDef, fixDef, i, vertex, vertex1, vertex2, _i, _len, _ref, _results;
      if (density == null) {
        density = 1.0;
      }
      if (restitution == null) {
        restitution = 0.5;
      }
      if (friction == null) {
        friction = 1.0;
      }
      if (group_index == null) {
        group_index = -2;
      }
      bodyDef = new b2BodyDef();
      bodyDef.position.x = block.position.x;
      bodyDef.position.y = block.position.y;
      bodyDef.userData = {
        name: name
      };
      bodyDef.type = b2Body.b2_staticBody;
      body = this.world.CreateBody(bodyDef);
      _ref = block.vertices;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        vertex = _ref[i];
        fixDef = new b2FixtureDef();
        fixDef.shape = new b2PolygonShape();
        fixDef.density = density;
        fixDef.restitution = restitution;
        fixDef.friction = friction;
        fixDef.filter.groupIndex = group_index;
        vertex1 = vertex;
        vertex2 = i === block.vertices.length - 1 ? block.vertices[0] : block.vertices[i + 1];
        fixDef.shape.SetAsArray([new b2Vec2(vertex1.x, vertex1.y), new b2Vec2(vertex2.x, vertex2.y)], 2);
        _results.push(body.CreateFixture(fixDef));
      }
      return _results;
    };

    Physics.create_shape = function(fix_def, shape, mirror) {
      var b2vertices, vertex, _i, _j, _len, _len1;
      if (mirror == null) {
        mirror = false;
      }
      b2vertices = [];
      if (mirror === false) {
        for (_i = 0, _len = shape.length; _i < _len; _i++) {
          vertex = shape[_i];
          b2vertices.push(new b2Vec2(vertex.x, vertex.y));
        }
      } else {
        for (_j = 0, _len1 = shape.length; _j < _len1; _j++) {
          vertex = shape[_j];
          b2vertices.unshift(new b2Vec2(-vertex.x, vertex.y));
        }
      }
      return fix_def.shape.SetAsArray(b2vertices);
    };

    return Physics;

  })();

  b2Vec2 = Box2D.Common.Math.b2Vec2;

  b2AABB = Box2D.Collision.b2AABB;

  Blocks = (function() {
    function Blocks(level) {
      this.level = level;
      this.assets = level.assets;
      this.theme = this.assets.theme;
      this.list = [];
      this.back_list = [];
      this.front_list = [];
    }

    Blocks.prototype.parse = function(xml) {
      var block, material, vertex, xml_block, xml_blocks, xml_material, xml_materials, xml_vertex, xml_vertices, _i, _j, _k, _len, _len1, _len2;
      xml_blocks = $(xml).find('block');
      for (_i = 0, _len = xml_blocks.length; _i < _len; _i++) {
        xml_block = xml_blocks[_i];
        block = {
          id: $(xml_block).attr('id'),
          position: {
            x: parseFloat($(xml_block).find('position').attr('x')),
            y: parseFloat($(xml_block).find('position').attr('y')),
            dynamic: $(xml_block).find('position').attr('dynamic') === 'true',
            background: $(xml_block).find('position').attr('background') === 'true'
          },
          usetexture: {
            id: $(xml_block).find('usetexture').attr('id').toLowerCase(),
            scale: parseFloat($(xml_block).find('usetexture').attr('scale'))
          },
          physics: {
            grip: parseFloat($(xml_block).find('physics').attr('grip'))
          },
          edges: {
            angle: parseFloat($(xml_block).find('edges').attr('angle')),
            materials: []
          },
          vertices: []
        };
        if (block.usetexture.id === 'default') {
          block.usetexture.id = 'dirt';
        }
        block.texture_name = this.theme.texture_params(block.usetexture.id).file;
        xml_materials = $(xml_block).find('edges material');
        for (_j = 0, _len1 = xml_materials.length; _j < _len1; _j++) {
          xml_material = xml_materials[_j];
          material = {
            name: $(xml_material).attr('name'),
            edge: $(xml_material).attr('edge'),
            color_r: parseInt($(xml_material).attr('color_r')),
            color_g: parseInt($(xml_material).attr('color_g')),
            color_b: parseInt($(xml_material).attr('color_b')),
            color_a: parseInt($(xml_material).attr('color_a')),
            scale: parseFloat($(xml_material).attr('scale')),
            depth: parseFloat($(xml_material).attr('depth'))
          };
          block.edges.materials.push(material);
        }
        xml_vertices = $(xml_block).find('vertex');
        for (_k = 0, _len2 = xml_vertices.length; _k < _len2; _k++) {
          xml_vertex = xml_vertices[_k];
          vertex = {
            x: parseFloat($(xml_vertex).attr('x')),
            y: parseFloat($(xml_vertex).attr('y')),
            absolute_x: parseFloat($(xml_vertex).attr('x')) + block.position.x,
            absolute_y: parseFloat($(xml_vertex).attr('y')) + block.position.y,
            edge: $(xml_vertex).attr('edge') ? $(xml_vertex).attr('edge').toLowerCase() : void 0
          };
          block.vertices.push(vertex);
        }
        block.aabb = block_AABB(block);
        this.list.push(block);
        if (block.position.background) {
          this.back_list.push(block);
        } else {
          this.front_list.push(block);
        }
      }
      this.list.sort(sort_blocks_by_texture);
      this.back_list.sort(sort_blocks_by_texture);
      this.front_list.sort(sort_blocks_by_texture);
      return this;
    };

    Blocks.prototype.init = function() {
      var block, ground, texture_file, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.list;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        block = _ref[_i];
        texture_file = block.texture_name;
        this.assets.textures.push(texture_file);
      }
      ground = Constants.ground;
      _ref1 = this.front_list;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        block = _ref1[_j];
        this.level.physics.create_lines(block, 'ground', ground.density, ground.restitution, ground.friction);
      }
      return this.edges = new Edges(this.level, this.list);
    };

    Blocks.prototype.display = function(ctx) {
      var block, i, vertex, _i, _j, _len, _len1, _ref, _ref1;
      if (Constants.debug) {
        return false;
      }
      _ref = this.back_list.concat(this.front_list);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        block = _ref[_i];
        if (visible_block(this.level.buffer.visible, block)) {
          ctx.beginPath();
          _ref1 = block.vertices;
          for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
            vertex = _ref1[i];
            if (i === 0) {
              ctx.moveTo(vertex.absolute_x, vertex.absolute_y);
            } else {
              ctx.lineTo(vertex.absolute_x, vertex.absolute_y);
            }
          }
          ctx.closePath();
          ctx.save();
          ctx.scale(1.0 / 40.0, -1.0 / 40.0);
          ctx.fillStyle = ctx.createPattern(this.assets.get(block.texture_name), 'repeat');
          ctx.fill();
          ctx.restore();
        }
      }
      return this.edges.display(ctx);
    };

    return Blocks;

  })();

  block_AABB = function(block) {
    var aabb, first, lower_bound, upper_bound, vertex, _i, _len, _ref;
    first = true;
    lower_bound = {};
    upper_bound = {};
    _ref = block.vertices;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      vertex = _ref[_i];
      if (first) {
        lower_bound = {
          x: vertex.absolute_x,
          y: vertex.absolute_y
        };
        upper_bound = {
          x: vertex.absolute_x,
          y: vertex.absolute_y
        };
        first = false;
      } else {
        if (vertex.absolute_x < lower_bound.x) {
          lower_bound.x = vertex.absolute_x;
        }
        if (vertex.absolute_y < lower_bound.y) {
          lower_bound.y = vertex.absolute_y;
        }
        if (vertex.absolute_x > upper_bound.x) {
          upper_bound.x = vertex.absolute_x;
        }
        if (vertex.absolute_y > upper_bound.y) {
          upper_bound.y = vertex.absolute_y;
        }
      }
    }
    aabb = new b2AABB();
    aabb.lowerBound.Set(lower_bound.x, lower_bound.y);
    aabb.upperBound.Set(upper_bound.x, upper_bound.y);
    return aabb;
  };

  visible_block = function(zone, block) {
    return block.aabb.TestOverlap(zone.aabb);
  };

  sort_blocks_by_texture = function(a, b) {
    if (a.usetexture.id > b.usetexture.id) {
      return 1;
    }
    if (a.usetexture.id <= b.usetexture.id) {
      return -1;
    }
    return 0;
  };

  b2Vec2 = Box2D.Common.Math.b2Vec2;

  b2AABB = Box2D.Collision.b2AABB;

  Edges = (function() {
    function Edges(level, blocks) {
      var block, edge, i, texture_file, vertex, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
      this.level = level;
      this.assets = this.level.assets;
      this.theme = this.assets.theme;
      this.blocks = blocks;
      this.list = [];
      _ref = this.blocks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        block = _ref[_i];
        _ref1 = block.vertices;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          vertex = _ref1[_j];
          if (vertex.edge) {
            texture_file = this.theme.edge_params(vertex.edge).file;
            this.assets.effects.push(texture_file);
          }
        }
      }
      _ref2 = this.blocks;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        block = _ref2[_k];
        _ref3 = block.vertices;
        for (i = _l = 0, _len3 = _ref3.length; _l < _len3; i = ++_l) {
          vertex = _ref3[i];
          if (vertex.edge) {
            edge = {
              vertex1: vertex,
              vertex2: i === block.vertices.length - 1 ? block.vertices[0] : block.vertices[i + 1],
              block: block,
              texture: vertex.edge,
              theme: this.theme.edge_params(vertex.edge)
            };
            edge.angle = Math2D.angle_between_points(edge.vertex1, edge.vertex2) - Math.PI / 2;
            edge.vertices = [
              {
                x: edge.vertex1.absolute_x,
                y: edge.vertex1.absolute_y - edge.theme.depth
              }, {
                x: edge.vertex2.absolute_x,
                y: edge.vertex2.absolute_y - edge.theme.depth
              }, {
                x: edge.vertex2.absolute_x,
                y: edge.vertex2.absolute_y
              }, {
                x: edge.vertex1.absolute_x,
                y: edge.vertex1.absolute_y
              }
            ];
            edge.aabb = edge_AABB(edge);
            this.list.push(edge);
          }
        }
      }
    }

    Edges.prototype.display = function(ctx) {
      var edge, _i, _len, _ref, _results;
      _ref = this.list;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        edge = _ref[_i];
        if (visible_edge(this.level.buffer.visible, edge)) {
          ctx.beginPath();
          ctx.moveTo(edge.vertices[0].x, edge.vertices[0].y);
          ctx.lineTo(edge.vertices[1].x, edge.vertices[1].y);
          ctx.lineTo(edge.vertices[2].x, edge.vertices[2].y);
          ctx.lineTo(edge.vertices[3].x, edge.vertices[3].y);
          ctx.closePath();
          ctx.save();
          ctx.translate(edge.vertex1.absolute_x, edge.vertex1.absolute_y);
          ctx.rotate(edge.angle);
          ctx.scale(1.0 / 100, -1.0 / 100);
          ctx.fillStyle = ctx.createPattern(this.assets.get(edge.theme.file), 'repeat');
          ctx.fill();
          _results.push(ctx.restore());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Edges;

  })();

  edge_AABB = function(edge) {
    var aabb, first, lower_bound, upper_bound, vertex, _i, _len, _ref;
    first = true;
    lower_bound = {};
    upper_bound = {};
    _ref = edge.vertices;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      vertex = _ref[_i];
      if (first) {
        lower_bound = {
          x: vertex.x,
          y: vertex.y
        };
        upper_bound = {
          x: vertex.x,
          y: vertex.y
        };
        first = false;
      } else {
        if (vertex.x < lower_bound.x) {
          lower_bound.x = vertex.x;
        }
        if (vertex.y < lower_bound.y) {
          lower_bound.y = vertex.y;
        }
        if (vertex.x > upper_bound.x) {
          upper_bound.x = vertex.x;
        }
        if (vertex.y > upper_bound.y) {
          upper_bound.y = vertex.y;
        }
      }
    }
    aabb = new b2AABB();
    aabb.lowerBound.Set(lower_bound.x, lower_bound.y);
    aabb.upperBound.Set(upper_bound.x, upper_bound.y);
    return aabb;
  };

  visible_edge = function(zone, edge) {
    return edge.aabb.TestOverlap(zone.aabb);
  };

  b2FixtureDef = Box2D.Dynamics.b2FixtureDef;

  Entities = (function() {
    function Entities(level) {
      this.level = level;
      this.assets = level.assets;
      this.world = level.physics.world;
      this.list = [];
      this.strawberries = [];
      this.wreckers = [];
    }

    Entities.prototype.parse = function(xml) {
      var entity, param, sprite, texture_name, xml_entities, xml_entity, xml_param, xml_params, _i, _j, _len, _len1;
      xml_entities = $(xml).find('entity');
      for (_i = 0, _len = xml_entities.length; _i < _len; _i++) {
        xml_entity = xml_entities[_i];
        entity = {
          id: $(xml_entity).attr('id'),
          type_id: $(xml_entity).attr('typeid'),
          size: {
            r: parseFloat($(xml_entity).find('size').attr('r')),
            width: parseFloat($(xml_entity).find('size').attr('width')),
            height: parseFloat($(xml_entity).find('size').attr('height'))
          },
          position: {
            x: parseFloat($(xml_entity).find('position').attr('x')),
            y: parseFloat($(xml_entity).find('position').attr('y')),
            angle: parseFloat($(xml_entity).find('position').attr('angle'))
          },
          params: []
        };
        xml_params = $(xml_entity).find('param');
        for (_j = 0, _len1 = xml_params.length; _j < _len1; _j++) {
          xml_param = xml_params[_j];
          param = {
            name: $(xml_param).attr('name'),
            value: $(xml_param).attr('value')
          };
          entity.params.push(param);
        }
        texture_name = this.entity_texture_name(entity);
        if (texture_name) {
          sprite = this.assets.theme.sprite_params(texture_name);
          entity.file = sprite.file;
          entity.file_base = sprite.file_base;
          entity.file_ext = sprite.file_ext;
          if (!entity.size.width) {
            entity.size.width = sprite.size.width;
          }
          if (!entity.size.height) {
            entity.size.height = sprite.size.height;
          }
          entity.center = {
            x: sprite.center.x,
            y: sprite.center.y
          };
          if (!entity.center.x) {
            entity.center.x = entity.size.width / 2;
          }
          if (!entity.center.y) {
            entity.center.y = entity.size.height / 2;
          }
          if (!entity.size.width) {
            entity.size.width = 2 * entity.size.r;
          }
          if (!entity.size.height) {
            entity.size.height = 2 * entity.size.r;
          }
          if (!entity.center.x) {
            entity.center.x = entity.size.r;
          }
          if (!entity.center.y) {
            entity.center.y = entity.size.r;
          }
          entity.delay = sprite.delay;
          entity.frames = sprite.frames;
          entity.display = true;
          entity.aabb = entity_AABB(entity);
        }
        this.list.push(entity);
      }
      return this;
    };

    Entities.prototype.init = function() {
      var entity, i, _i, _j, _len, _ref, _ref1, _results;
      _ref = this.list;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        if (entity.display) {
          if (entity.frames === 0) {
            this.assets.anims.push(entity.file);
          } else {
            for (i = _j = 0, _ref1 = entity.frames - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
              this.assets.anims.push(frame_name(entity, i));
            }
          }
        }
        if (entity.type_id === 'EndOfLevel') {
          this.create_entity(entity, 'end_of_level');
          _results.push(this.end_of_level = entity);
        } else if (entity.type_id === 'Strawberry') {
          this.create_entity(entity, 'strawberry');
          _results.push(this.strawberries.push(entity));
        } else if (entity.type_id === 'Wrecker') {
          this.create_entity(entity, 'wrecker');
          _results.push(this.wreckers.push(entity));
        } else if (entity.type_id === 'PlayerStart') {
          _results.push(this.player_start = {
            x: entity.position.x,
            y: entity.position.y
          });
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Entities.prototype.create_entity = function(entity, name) {
      var body, bodyDef, fixDef;
      fixDef = new b2FixtureDef();
      fixDef.shape = new b2CircleShape(entity.size.r);
      fixDef.isSensor = true;
      bodyDef = new b2BodyDef();
      bodyDef.position.x = entity.position.x;
      bodyDef.position.y = entity.position.y;
      bodyDef.userData = {
        name: name,
        entity: entity
      };
      bodyDef.type = b2Body.b2_staticBody;
      body = this.world.CreateBody(bodyDef);
      body.CreateFixture(fixDef);
      return body;
    };

    Entities.prototype.display_sprites = function(ctx) {
      var entity, _i, _len, _ref, _results;
      if (Constants.debug) {
        return false;
      }
      _ref = this.list;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        if (entity.type_id === 'Sprite') {
          if (visible_entity(this.level.buffer.visible, entity)) {
            _results.push(this.display_entity(ctx, entity));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Entities.prototype.display_items = function() {
      var ctx, entity, _i, _len, _ref, _results;
      if (Constants.debug) {
        return false;
      }
      ctx = this.level.ctx;
      _ref = this.list;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        if (entity.type_id === 'EndOfLevel' || entity.type_id === 'Strawberry' || entity.type_id === 'Wrecker') {
          if (visible_entity(this.level.visible, entity)) {
            _results.push(this.display_entity(ctx, entity));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Entities.prototype.display_entity = function(ctx, entity) {
      var num, texture_name;
      if (entity.frames) {
        num = this.level.current_time % (entity.frames * entity.delay * 1000);
        num = Math.floor(num / (entity.delay * 1000));
        texture_name = frame_name(entity, num);
      } else {
        texture_name = entity.file;
      }
      ctx.save();
      ctx.translate(entity.position.x, entity.position.y);
      ctx.scale(1, -1);
      ctx.drawImage(this.assets.get(texture_name), -entity.size.width + entity.center.x, -entity.size.height + entity.center.y, entity.size.width, entity.size.height);
      return ctx.restore();
    };

    Entities.prototype.entity_texture_name = function(entity) {
      var param, _i, _len, _ref;
      if (entity.type_id === 'Sprite') {
        _ref = entity.params;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          param = _ref[_i];
          if (param.name === 'name') {
            return param.value;
          }
        }
      } else if (entity.type_id === 'EndOfLevel') {
        return 'Flower';
      } else if (entity.type_id === 'Strawberry' || entity.type_id === 'Wrecker') {
        return entity.type_id;
      }
    };

    return Entities;

  })();

  frame_name = function(entity, frame_number) {
    return "" + entity.file_base + ((frame_number / 100.0).toFixed(2).toString().substring(2)) + "." + entity.file_ext;
  };

  entity_AABB = function(entity) {
    var aabb, lower_bound, upper_bound;
    lower_bound = {};
    upper_bound = {};
    lower_bound.x = entity.position.x - entity.size.width + entity.center.x;
    lower_bound.y = entity.position.y - entity.center.y;
    upper_bound.x = lower_bound.x + entity.size.width;
    upper_bound.y = lower_bound.y + entity.size.height;
    aabb = new b2AABB();
    aabb.lowerBound.Set(lower_bound.x, lower_bound.y);
    aabb.upperBound.Set(upper_bound.x, upper_bound.y);
    return aabb;
  };

  visible_entity = function(zone, entity) {
    return entity.display && entity.aabb.TestOverlap(zone.aabb);
  };

  Infos = (function() {
    function Infos(level) {
      this.level = level;
      this.assets = level.assets;
    }

    Infos.prototype.parse = function(xml) {
      var xml_border, xml_infos, xml_level, xml_music;
      xml_level = $(xml).find('level');
      this.identifier = xml_level.attr('id');
      this.pack_name = xml_level.attr('levelpack');
      this.pack_id = xml_level.attr('levelpackNum');
      this.r_version = xml_level.attr('rversion');
      xml_infos = $(xml).find('level').find('info');
      this.name = xml_infos.find('name').text();
      this.description = xml_infos.find('description').text();
      this.author = xml_infos.find('author').text();
      this.date = xml_infos.find('date').text();
      xml_border = xml_infos.find('border');
      this.border = xml_border.attr('texture');
      xml_music = xml_infos.find('music');
      this.music = xml_music.attr('name');
      return this;
    };

    Infos.prototype.init = function() {};

    Infos.prototype.display = function(ctx) {};

    return Infos;

  })();

  LayerOffsets = (function() {
    function LayerOffsets(level) {
      this.level = level;
      this.assets = level.assets;
      this.list = [];
    }

    LayerOffsets.prototype.parse = function(xml) {
      var layer_offset, xml_layer_offset, xml_layer_offsets, _i, _len;
      xml_layer_offsets = $(xml).find('layeroffsets layeroffset');
      for (_i = 0, _len = xml_layer_offsets.length; _i < _len; _i++) {
        xml_layer_offset = xml_layer_offsets[_i];
        layer_offset = {
          x: parseFloat($(xml_layer_offset).attr('x')),
          y: parseFloat($(xml_layer_offset).attr('y')),
          front_layer: $(xml_layer_offset).attr('frontlayer')
        };
        this.list.push(layer_offset);
      }
      return this;
    };

    LayerOffsets.prototype.init = function() {};

    LayerOffsets.prototype.display = function(ctx) {};

    return LayerOffsets;

  })();

  b2Vec2 = Box2D.Common.Math.b2Vec2;

  b2AABB = Box2D.Collision.b2AABB;

  Limits = (function() {
    function Limits(level) {
      this.level = level;
      this.assets = level.assets;
      this.theme = this.assets.theme;
    }

    Limits.prototype.parse = function(xml) {
      var xml_limits;
      xml_limits = $(xml).find('limits');
      this.player = {
        left: parseFloat(xml_limits.attr('left')),
        right: parseFloat(xml_limits.attr('right')),
        top: parseFloat(xml_limits.attr('top')),
        bottom: parseFloat(xml_limits.attr('bottom'))
      };
      this.screen = {
        left: parseFloat(xml_limits.attr('left')) - 20,
        right: parseFloat(xml_limits.attr('right')) + 20,
        top: parseFloat(xml_limits.attr('top')) + 20,
        bottom: parseFloat(xml_limits.attr('bottom')) - 20
      };
      this.size = {
        x: this.screen.right - this.screen.left,
        y: this.screen.top - this.screen.bottom
      };
      this.texture = 'dirt';
      this.texture_name = this.theme.texture_params('dirt').file;
      return this;
    };

    Limits.prototype.init = function() {
      var ground, vertices;
      this.assets.textures.push(this.texture_name);
      ground = Constants.ground;
      vertices = [];
      vertices.push({
        x: this.screen.left,
        y: this.screen.top
      });
      vertices.push({
        x: this.screen.left,
        y: this.screen.bottom
      });
      vertices.push({
        x: this.player.left,
        y: this.screen.bottom
      });
      vertices.push({
        x: this.player.left,
        y: this.screen.top
      });
      this.level.physics.create_polygon(vertices, 'ground', ground.density, ground.restitution, ground.friction);
      vertices = [];
      vertices.push({
        x: this.player.right,
        y: this.screen.top
      });
      vertices.push({
        x: this.player.right,
        y: this.screen.bottom
      });
      vertices.push({
        x: this.screen.right,
        y: this.screen.bottom
      });
      vertices.push({
        x: this.screen.right,
        y: this.screen.top
      });
      this.level.physics.create_polygon(vertices, 'ground', ground.density, ground.restitution, ground.friction);
      vertices = [];
      vertices.push({
        x: this.player.right,
        y: this.player.bottom
      });
      vertices.push({
        x: this.player.left,
        y: this.player.bottom
      });
      vertices.push({
        x: this.player.left,
        y: this.screen.bottom
      });
      vertices.push({
        x: this.player.right,
        y: this.screen.bottom
      });
      this.level.physics.create_polygon(vertices, 'ground', ground.density, ground.restitution, ground.friction);
      vertices = [];
      vertices.push({
        x: this.player.right,
        y: this.screen.top
      });
      vertices.push({
        x: this.player.left,
        y: this.screen.top
      });
      vertices.push({
        x: this.player.left,
        y: this.player.top
      });
      vertices.push({
        x: this.player.right,
        y: this.player.top
      });
      return this.level.physics.create_polygon(vertices, 'ground', ground.density, ground.restitution, ground.friction);
    };

    Limits.prototype.display = function(ctx) {
      var buffer;
      if (Constants.debug) {
        return false;
      }
      buffer = this.level.buffer;
      if (this.player.left > buffer.visible.left) {
        ctx.beginPath();
        ctx.moveTo(this.screen.left, this.screen.top);
        ctx.lineTo(this.screen.left, this.screen.bottom);
        ctx.lineTo(this.player.left, this.screen.bottom);
        ctx.lineTo(this.player.left, this.screen.top);
        ctx.closePath();
        this.save_apply_texture_and_restore(ctx);
      }
      if (this.player.right < buffer.visible.right) {
        ctx.beginPath();
        ctx.moveTo(this.screen.right, this.screen.top);
        ctx.lineTo(this.screen.right, this.screen.bottom);
        ctx.lineTo(this.player.right, this.screen.bottom);
        ctx.lineTo(this.player.right, this.screen.top);
        ctx.closePath();
        this.save_apply_texture_and_restore(ctx);
      }
      if (this.player.bottom > buffer.visible.bottom) {
        ctx.beginPath();
        ctx.moveTo(this.player.right, this.player.bottom);
        ctx.lineTo(this.player.left, this.player.bottom);
        ctx.lineTo(this.player.left, this.screen.bottom);
        ctx.lineTo(this.player.right, this.screen.bottom);
        ctx.closePath();
        this.save_apply_texture_and_restore(ctx);
      }
      if (this.player.top < buffer.visible.top) {
        ctx.beginPath();
        ctx.moveTo(this.player.right, this.screen.top);
        ctx.lineTo(this.player.left, this.screen.top);
        ctx.lineTo(this.player.left, this.player.top);
        ctx.lineTo(this.player.right, this.player.top);
        ctx.closePath();
        return this.save_apply_texture_and_restore(ctx);
      }
    };

    Limits.prototype.save_apply_texture_and_restore = function(ctx) {
      ctx.save();
      ctx.scale(1.0 / 40.0, -1.0 / 40.0);
      ctx.fillStyle = ctx.createPattern(this.assets.get(this.texture_name), "repeat");
      ctx.fill();
      return ctx.restore();
    };

    return Limits;

  })();

  Script = (function() {
    function Script(level) {
      this.level = level;
      this.assets = level.assets;
    }

    Script.prototype.parse = function(xml) {
      var xml_script;
      xml_script = $(xml).find('script');
      this.code = xml_script.text();
      return this;
    };

    Script.prototype.init = function() {};

    Script.prototype.display = function(ctx) {};

    return Script;

  })();

  Sky = (function() {
    function Sky(level) {
      this.level = level;
      this.assets = level.assets;
      this.theme = this.assets.theme;
    }

    Sky.prototype.parse = function(xml) {
      var xml_sky;
      xml_sky = $(xml).find('level info sky');
      this.name = xml_sky.text().toLowerCase();
      this.color_r = parseInt(xml_sky.attr('color_r'));
      this.color_g = parseInt(xml_sky.attr('color_g'));
      this.color_b = parseInt(xml_sky.attr('color_b'));
      this.color_a = parseInt(xml_sky.attr('color_a'));
      this.zoom = parseFloat(xml_sky.attr('zoom'));
      this.offset = parseFloat(xml_sky.attr('offset'));
      if (this.name === '') {
        this.name = 'sky1';
      }
      this.file_name = this.theme.texture_params(this.name).file;
      return this;
    };

    Sky.prototype.init = function() {
      return this.assets.textures.push(this.file_name);
    };

    Sky.prototype.display = function() {
      var ctx;
      ctx = this.level.ctx;
      ctx.beginPath();
      ctx.moveTo(this.level.canvas_width, this.level.canvas_height);
      ctx.lineTo(0, this.level.canvas_height);
      ctx.lineTo(0, 0);
      ctx.lineTo(this.level.canvas_width, 0);
      ctx.closePath();
      if (Constants.debug) {
        ctx.fillStyle = "#222228";
        return ctx.fill();
      } else {
        ctx.save();
        ctx.scale(4.0, 4.0);
        ctx.translate(-this.level.camera.target().x * 4, this.level.camera.target().y * 2);
        ctx.fillStyle = ctx.createPattern(this.assets.get(this.file_name), "repeat");
        ctx.fill();
        return ctx.restore();
      }
    };

    return Sky;

  })();

  Ghost = (function() {
    function Ghost(level, replay) {
      this.level = level;
      this.replay = replay;
      this.moto = new Moto(this.level, true);
    }

    Ghost.prototype.init = function() {
      return this.moto.init();
    };

    Ghost.prototype.reload = function() {
      this.moto.destroy();
      this.moto = new Moto(this.level, true);
      return this.moto.init();
    };

    Ghost.prototype.move = function() {
      var current_input, milestone, part, _i, _j, _len, _len1, _ref, _ref1, _results;
      current_input = {
        up: this.replay.is_down('up'),
        down: this.replay.is_down('down'),
        left: this.replay.is_down('left'),
        right: this.replay.is_down('right'),
        space: this.replay.is_pressed('space')
      };
      if (!this.level.moto.dead) {
        window.debug2 += "" + this.level.physics.steps + " - " + (current_input.up ? 1 : 0) + " " + (current_input.down ? 1 : 0) + " " + (current_input.left ? 1 : 0) + " " + (current_input.right ? 1 : 0) + " " + (current_input.space ? 1 : 0) + "\n";
      }
      this.moto.move(current_input);
      milestone = this.replay.milestones[this.level.physics.steps];
      if (milestone) {
        _ref = ['body', 'left_wheel', 'right_wheel', 'left_axle', 'right_axle'];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          part = _ref[_i];
          this.moto[part].SetPosition({
            x: milestone[part].position.x,
            y: milestone[part].position.y
          });
          this.moto[part].SetAngle(milestone[part].angle);
          this.moto[part].SetLinearVelocity({
            x: milestone[part].linear_velocity.x,
            y: milestone[part].linear_velocity.y
          });
          this.moto[part].GetAngularVelocity(milestone[part].angular_velocity);
        }
        _ref1 = ['torso', 'upper_leg', 'lower_leg', 'upper_arm', 'lower_arm'];
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          part = _ref1[_j];
          this.moto.rider[part].SetPosition({
            x: milestone[part].position.x,
            y: milestone[part].position.y
          });
          this.moto.rider[part].SetAngle(milestone[part].angle);
          this.moto.rider[part].SetLinearVelocity({
            x: milestone[part].linear_velocity.x,
            y: milestone[part].linear_velocity.y
          });
          _results.push(this.moto.rider[part].GetAngularVelocity(milestone[part].angular_velocity));
        }
        return _results;
      }
    };

    Ghost.prototype.display = function(transparent) {
      if (transparent == null) {
        transparent = true;
      }
      return this.moto.display();
    };

    return Ghost;

  })();

  Ghosts = (function() {
    function Ghosts(level) {
      this.level = level;
      this.assets = level.assets;
      this.options = level.options;
      this.replay = this.load_replay();
      this.player = this.load_player();
      this.others = this.load_others();
    }

    Ghosts.prototype.init = function() {
      var part, parts, _i, _len, _results;
      if (this.options.best_score_ghost && this.player.replay) {
        this.player.init();
      }
      parts = [Constants.torso, Constants.upper_leg, Constants.lower_leg, Constants.upper_arm, Constants.lower_arm, Constants.body, Constants.left_wheel, Constants.right_wheel, Constants.left_axle, Constants.right_axle];
      _results = [];
      for (_i = 0, _len = parts.length; _i < _len; _i++) {
        part = parts[_i];
        _results.push(this.assets.moto.push(part.ghost_texture));
      }
      return _results;
    };

    Ghosts.prototype.reload = function() {
      if (this.options.best_score_ghost && this.player.replay) {
        return this.player.reload();
      }
    };

    Ghosts.prototype.move = function() {
      if (this.options.best_score_ghost && this.player.replay) {
        return this.player.move();
      }
    };

    Ghosts.prototype.display = function() {
      var ghost, _i, _len, _ref, _results;
      if (this.options.best_score_ghost && this.player.replay) {
        this.player.display();
      }
      if (this.replay) {
        this.replay.display(false);
      }
      _ref = this.others;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ghost = _ref[_i];
        _results.push(ghost.display());
      }
      return _results;
    };

    Ghosts.prototype.load_replay = function() {
      var replay;
      if (this.options.replay_mode) {
        replay = new Replay(this.level);
        replay.load(this.options.replay_file);
        return new Ghost(this.level, replay);
      } else {
        return null;
      }
    };

    Ghosts.prototype.load_player = function() {
      var data, replay, replay_steps;
      data = this.options.best_score_file;
      replay_steps = this.options.best_score_steps;
      if (data.length > 0) {
        replay = new Replay(this.level);
        replay.load(data);
        replay.steps = replay_steps;
        return new Ghost(this.level, replay);
      } else {
        return new Ghost(this.level, null);
      }
    };

    Ghosts.prototype.load_others = function() {
      var option_replay, others, replay, replay_file, replay_steps, _i, _len, _ref;
      others = [];
      _ref = this.options.replays;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option_replay = _ref[_i];
        replay_file = option_replay.file;
        replay_steps = option_replay.steps;
        if (replay_file.length > 0) {
          replay = new Replay(this.level);
          replay.load("" + replay_file);
          replay.steps = replay_steps;
          others.push(new Ghost(this.level, replay));
        }
      }
      return others;
    };

    return Ghosts;

  })();

  b2Vec2 = Box2D.Common.Math.b2Vec2;

  b2BodyDef = Box2D.Dynamics.b2BodyDef;

  b2Body = Box2D.Dynamics.b2Body;

  b2FixtureDef = Box2D.Dynamics.b2FixtureDef;

  b2Fixture = Box2D.Dynamics.b2Fixture;

  b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape;

  b2CircleShape = Box2D.Collision.Shapes.b2CircleShape;

  b2PrismaticJointDef = Box2D.Dynamics.Joints.b2PrismaticJointDef;

  b2RevoluteJointDef = Box2D.Dynamics.Joints.b2RevoluteJointDef;

  Moto = (function() {
    function Moto(level, ghost) {
      if (ghost == null) {
        ghost = false;
      }
      this.level = level;
      this.assets = level.assets;
      this.world = level.physics.world;
      this.mirror = 1;
      this.dead = false;
      this.ghost = ghost;
      this.rider = new Rider(level, this);
    }

    Moto.prototype.destroy = function() {
      this.rider.destroy();
      this.world.DestroyBody(this.body);
      this.world.DestroyBody(this.left_wheel);
      this.world.DestroyBody(this.right_wheel);
      this.world.DestroyBody(this.left_axle);
      return this.world.DestroyBody(this.right_axle);
    };

    Moto.prototype.init = function() {
      var part, parts, _i, _len;
      parts = [Constants.body, Constants.left_wheel, Constants.right_wheel, Constants.left_axle, Constants.right_axle];
      for (_i = 0, _len = parts.length; _i < _len; _i++) {
        part = parts[_i];
        if (this.ghost) {
          this.assets.moto.push(part.ghost_texture);
        } else {
          this.assets.moto.push(part.texture);
        }
      }
      this.player_start = this.level.entities.player_start;
      this.body = this.create_body();
      this.left_wheel = this.create_wheel(Constants.left_wheel);
      this.right_wheel = this.create_wheel(Constants.right_wheel);
      this.left_axle = this.create_axle(Constants.left_axle);
      this.right_axle = this.create_axle(Constants.right_axle);
      this.left_revolute_joint = this.create_revolute_joint(this.left_axle, this.left_wheel);
      this.right_revolute_joint = this.create_revolute_joint(this.right_axle, this.right_wheel);
      this.left_prismatic_joint = this.create_prismatic_joint(this.left_axle, Constants.left_suspension);
      this.right_prismatic_joint = this.create_prismatic_joint(this.right_axle, Constants.right_suspension);
      return this.rider.init();
    };

    Moto.prototype.move = function(input) {
      var air_density, back_force, biker_force, drag_force, moto_acceleration, object_penetration, rigidity, squared_speed, v;
      if (input == null) {
        input = this.level.input;
      }
      moto_acceleration = Constants.moto_acceleration;
      biker_force = Constants.biker_force;
      if (!this.dead) {
        if (input.up) {
          this.left_wheel.ApplyTorque(-this.mirror * moto_acceleration);
        }
        if (input.down) {
          this.right_wheel.SetAngularVelocity(0);
          this.left_wheel.SetAngularVelocity(0);
        }
        if ((input.left && this.mirror === 1) || (input.right && this.mirror === -1)) {
          this.wheeling(biker_force);
        }
        if ((input.right && this.mirror === 1) || (input.left && this.mirror === -1)) {
          biker_force = -biker_force * 0.8;
          this.wheeling(biker_force);
        }
        if (input.space) {
          this.flip();
        }
      }
      if (!input.up && !input.down) {
        v = this.left_wheel.GetAngularVelocity();
        this.left_wheel.ApplyTorque((Math.abs(v) >= 0.2 ? -v / 10 : void 0));
        v = this.right_wheel.GetAngularVelocity();
        this.right_wheel.ApplyTorque((Math.abs(v) >= 0.2 ? -v / 100 : void 0));
      }
      back_force = Constants.left_suspension.back_force;
      rigidity = Constants.left_suspension.rigidity;
      this.left_prismatic_joint.SetMaxMotorForce(rigidity + Math.abs(rigidity * 100 * Math.pow(this.left_prismatic_joint.GetJointTranslation(), 2)));
      this.left_prismatic_joint.SetMotorSpeed(-back_force * this.left_prismatic_joint.GetJointTranslation());
      back_force = Constants.right_suspension.back_force;
      rigidity = Constants.right_suspension.rigidity;
      this.right_prismatic_joint.SetMaxMotorForce(rigidity + Math.abs(rigidity * 100 * Math.pow(this.right_prismatic_joint.GetJointTranslation(), 2)));
      this.right_prismatic_joint.SetMotorSpeed(-back_force * this.right_prismatic_joint.GetJointTranslation());
      air_density = Constants.air_density;
      object_penetration = 0.025;
      squared_speed = Math.pow(this.body.GetLinearVelocity().x, 2);
      drag_force = air_density * squared_speed * object_penetration;
      this.body.SetLinearDamping(drag_force);
      if (this.right_wheel.GetAngularVelocity() > Constants.max_moto_speed) {
        this.right_wheel.SetAngularVelocity(Constants.max_moto_speed);
      } else if (this.right_wheel.GetAngularVelocity() < -Constants.max_moto_speed) {
        this.right_wheel.SetAngularVelocity(-Constants.max_moto_speed);
      }
      if (this.left_wheel.GetAngularVelocity() > Constants.max_moto_speed) {
        return this.left_wheel.SetAngularVelocity(Constants.max_moto_speed);
      } else if (this.left_wheel.GetAngularVelocity() < -Constants.max_moto_speed) {
        return this.left_wheel.SetAngularVelocity(-Constants.max_moto_speed);
      }
    };

    Moto.prototype.wheeling = function(force) {
      var force_leg, force_torso, moto_angle;
      moto_angle = this.mirror * this.body.GetAngle();
      this.body.ApplyTorque(this.mirror * force * 0.50);
      force_torso = Math2D.rotate_point({
        x: this.mirror * (-force),
        y: 0
      }, moto_angle, {
        x: 0,
        y: 0
      });
      force_torso.y = this.mirror * force_torso.y;
      this.rider.torso.ApplyForce(force_torso, this.rider.torso.GetWorldCenter());
      force_leg = Math2D.rotate_point({
        x: this.mirror * force,
        y: 0
      }, moto_angle, {
        x: 0,
        y: 0
      });
      force_leg.y = this.mirror * force_leg.y;
      return this.rider.lower_leg.ApplyForce(force_leg, this.rider.lower_leg.GetWorldCenter());
    };

    Moto.prototype.flip = function() {
      if (!this.dead) {
        return MotoFlipService.execute(this);
      }
    };

    Moto.prototype.create_body = function() {
      var body, bodyDef, fixDef;
      fixDef = new b2FixtureDef();
      fixDef.shape = new b2PolygonShape();
      fixDef.density = Constants.body.density;
      fixDef.restitution = Constants.body.restitution;
      fixDef.friction = Constants.body.friction;
      fixDef.isSensor = !Constants.body.collisions;
      fixDef.filter.groupIndex = -1;
      Physics.create_shape(fixDef, Constants.body.shape, this.mirror === -1);
      bodyDef = new b2BodyDef();
      bodyDef.position.x = this.player_start.x + this.mirror * Constants.body.position.x;
      bodyDef.position.y = this.player_start.y + Constants.body.position.y;
      bodyDef.userData = {
        name: 'moto',
        moto: this
      };
      bodyDef.type = b2Body.b2_dynamicBody;
      body = this.world.CreateBody(bodyDef);
      body.CreateFixture(fixDef);
      return body;
    };

    Moto.prototype.create_wheel = function(part_constants) {
      var bodyDef, fixDef, wheel;
      fixDef = new b2FixtureDef();
      fixDef.shape = new b2CircleShape(part_constants.radius);
      fixDef.density = part_constants.density;
      fixDef.restitution = part_constants.restitution;
      fixDef.friction = part_constants.friction;
      fixDef.isSensor = !part_constants.collisions;
      fixDef.filter.groupIndex = -1;
      bodyDef = new b2BodyDef();
      bodyDef.position.x = this.player_start.x + this.mirror * part_constants.position.x;
      bodyDef.position.y = this.player_start.y + part_constants.position.y;
      bodyDef.userData = {
        name: 'moto',
        moto: this
      };
      bodyDef.type = b2Body.b2_dynamicBody;
      wheel = this.world.CreateBody(bodyDef);
      wheel.CreateFixture(fixDef);
      return wheel;
    };

    Moto.prototype.create_axle = function(part_constants) {
      var body, bodyDef, fixDef;
      fixDef = new b2FixtureDef();
      fixDef.shape = new b2PolygonShape();
      fixDef.density = part_constants.density;
      fixDef.restitution = part_constants.restitution;
      fixDef.friction = part_constants.friction;
      fixDef.isSensor = !part_constants.collisions;
      fixDef.filter.groupIndex = -1;
      Physics.create_shape(fixDef, part_constants.shape, this.mirror === -1);
      bodyDef = new b2BodyDef();
      bodyDef.position.x = this.player_start.x + this.mirror * part_constants.position.x;
      bodyDef.position.y = this.player_start.y + part_constants.position.y;
      bodyDef.userData = {
        name: 'moto',
        moto: this
      };
      bodyDef.type = b2Body.b2_dynamicBody;
      body = this.world.CreateBody(bodyDef);
      body.CreateFixture(fixDef);
      return body;
    };

    Moto.prototype.create_revolute_joint = function(axle, wheel) {
      var jointDef;
      jointDef = new b2RevoluteJointDef();
      jointDef.Initialize(axle, wheel, wheel.GetWorldCenter());
      return this.world.CreateJoint(jointDef);
    };

    Moto.prototype.create_prismatic_joint = function(axle, part_constants) {
      var angle, jointDef;
      jointDef = new b2PrismaticJointDef();
      angle = part_constants.angle;
      jointDef.Initialize(this.body, axle, axle.GetWorldCenter(), new b2Vec2(this.mirror * angle.x, angle.y));
      jointDef.enableLimit = true;
      jointDef.lowerTranslation = part_constants.lower_translation;
      jointDef.upperTranslation = part_constants.upper_translation;
      jointDef.enableMotor = true;
      jointDef.collideConnected = false;
      return this.world.CreateJoint(jointDef);
    };

    Moto.prototype.display = function() {
      if (Constants.debug) {
        return false;
      }
      if (this.level.options.replay_mode) {
        return false;
      }
      this.display_wheel(this.left_wheel, Constants.left_wheel);
      this.display_wheel(this.right_wheel, Constants.right_wheel);
      this.display_left_axle(this.left_axle, Constants.left_axle);
      this.display_right_axle(this.right_axle, Constants.right_axle);
      this.display_body(this.body, Constants.body);
      return this.rider.display();
    };

    Moto.prototype.display_wheel = function(part, part_constants) {
      var angle, position, texture;
      position = part.GetPosition();
      angle = part.GetAngle();
      this.level.ctx.save();
      this.level.ctx.translate(position.x, position.y);
      this.level.ctx.rotate(angle);
      texture = this.ghost ? part_constants.ghost_texture : part_constants.texture;
      this.level.ctx.drawImage(this.level.assets.get(texture), -part_constants.radius, -part_constants.radius, part_constants.radius * 2, part_constants.radius * 2);
      return this.level.ctx.restore();
    };

    Moto.prototype.display_body = function(part, part_constants) {
      var angle, position, texture;
      position = part.GetPosition ? part.GetPosition() : part.position;
      angle = part.GetAngle ? part.GetAngle() : part.angle;
      this.level.ctx.save();
      this.level.ctx.translate(position.x, position.y);
      this.level.ctx.scale(this.mirror, -1);
      this.level.ctx.rotate(this.mirror * (-angle));
      texture = this.ghost ? part_constants.ghost_texture : part_constants.texture;
      this.level.ctx.drawImage(this.level.assets.get(texture), -part_constants.texture_size.x / 2, -part_constants.texture_size.y / 2, part_constants.texture_size.x, part_constants.texture_size.y);
      return this.level.ctx.restore();
    };

    Moto.prototype.display_left_axle = function(part, part_constants) {
      var axle_position, axle_thickness, texture, wheel_position;
      axle_thickness = 0.09;
      wheel_position = this.left_wheel.GetPosition();
      wheel_position = {
        x: wheel_position.x - this.mirror * axle_thickness / 2.0,
        y: wheel_position.y - 0.025
      };
      axle_position = {
        x: -0.17 * this.mirror,
        y: -0.30
      };
      texture = this.ghost ? part_constants.ghost_texture : part_constants.texture;
      return this.display_axle_common(wheel_position, axle_position, axle_thickness, texture);
    };

    Moto.prototype.display_right_axle = function(part, part_constants) {
      var axle_position, axle_thickness, texture, wheel_position;
      axle_thickness = 0.07;
      wheel_position = this.right_wheel.GetPosition();
      wheel_position = {
        x: wheel_position.x + this.mirror * axle_thickness / 2.0 - this.mirror * 0.03,
        y: wheel_position.y - 0.045
      };
      axle_position = {
        x: 0.52 * this.mirror,
        y: 0.025
      };
      texture = this.ghost ? part_constants.ghost_texture : part_constants.texture;
      return this.display_axle_common(wheel_position, axle_position, axle_thickness, texture);
    };

    Moto.prototype.display_axle_common = function(wheel_position, axle_position, axle_thickness, texture) {
      var angle, axle_adjusted_position, body_angle, body_position, distance;
      body_position = this.body.GetPosition();
      body_angle = this.body.GetAngle();
      axle_adjusted_position = Math2D.rotate_point(axle_position, body_angle, body_position);
      distance = Math2D.distance_between_points(wheel_position, axle_adjusted_position);
      angle = Math2D.angle_between_points(axle_adjusted_position, wheel_position) + this.mirror * Math.PI / 2;
      this.level.ctx.save();
      this.level.ctx.translate(wheel_position.x, wheel_position.y);
      this.level.ctx.scale(this.mirror, -1);
      this.level.ctx.rotate(this.mirror * (-angle));
      this.level.ctx.drawImage(this.level.assets.get(texture), 0.0, -axle_thickness / 2, distance, axle_thickness);
      return this.level.ctx.restore();
    };

    return Moto;

  })();

  Particles = (function() {
    function Particles(level, replay) {
      this.level = level;
      this.physics = level.physics;
      this.world = this.physics.world;
      this.list = [];
    }

    Particles.prototype.create = function() {
      var bodyDef, fixDef, particle;
      fixDef = new b2FixtureDef();
      fixDef.shape = new b2CircleShape(0.04);
      fixDef.density = 1.0;
      fixDef.restitution = 0.5;
      fixDef.friction = 1.0;
      fixDef.isSensor = false;
      fixDef.filter.groupIndex = -1;
      bodyDef = new b2BodyDef();
      bodyDef.position.x = this.level.moto.left_wheel.GetPosition().x;
      bodyDef.position.y = this.level.moto.left_wheel.GetPosition().y - Constants.left_wheel.radius;
      bodyDef.userData = {
        name: 'particle'
      };
      bodyDef.type = b2Body.b2_dynamicBody;
      particle = this.world.CreateBody(bodyDef);
      particle.CreateFixture(fixDef);
      particle.ApplyForce({
        x: -1,
        y: -1
      }, particle.GetWorldCenter());
      return this.list.push(particle);
    };

    Particles.prototype.display = function() {
      var ctx, particle, position, _i, _len, _ref, _results;
      ctx = this.level.ctx;
      _ref = this.list;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        particle = _ref[_i];
        position = particle.GetPosition();
        ctx.save();
        ctx.translate(position.x, position.y);
        ctx.beginPath();
        ctx.arc(0, 0, 0.04, 0, 2 * Math.PI);
        ctx.fill();
        _results.push(ctx.restore());
      }
      return _results;
    };

    return Particles;

  })();

  Replay = (function() {
    function Replay(level) {
      this.level = level;
      this.success = false;
      this.steps = 0;
      this.inputs = {
        up_down: [],
        up_up: [],
        down_down: [],
        down_up: [],
        left_down: [],
        left_up: [],
        right_down: [],
        right_up: [],
        space_pressed: []
      };
      this.milestones = {};
    }

    Replay.prototype.clone = function() {
      var key, new_replay, part, value, _i, _j, _len, _len1, _ref, _ref1, _ref2;
      new_replay = new Replay(this.level);
      new_replay.success = this.success;
      new_replay.steps = this.steps;
      _ref = ['up_down', 'up_up', 'down_down', 'down_up', 'left_down', 'left_up', 'right_down', 'right_up', 'space_pressed'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        new_replay.inputs[key] = this.inputs[key].slice();
      }
      _ref1 = this.milestones;
      for (key in _ref1) {
        value = _ref1[key];
        new_replay.milestones[key] = {};
        _ref2 = ['body', 'left_wheel', 'right_wheel', 'left_axle', 'right_axle', 'torso', 'upper_leg', 'lower_leg', 'upper_arm', 'lower_arm'];
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          part = _ref2[_j];
          new_replay.milestones[key][part] = {
            position: {
              x: value[part].position.x,
              y: value[part].position.y
            },
            angle: value[part].angle,
            linear_velocity: {
              x: value[part].linear_velocity.x,
              y: value[part].linear_velocity.y
            },
            angular_velocity: value[part].angular_velocity
          };
        }
      }
      return new_replay;
    };

    Replay.prototype.add_step = function() {
      var input, key, milestone, moto, part, rider, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
      this.steps = this.level.physics.steps;
      input = this.level.input;
      moto = this.level.moto;
      rider = moto.rider;
      _ref = ['up', 'down', 'left', 'right'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        if (input[key] && this.is_up(key)) {
          this.inputs["" + key + "_down"].push(this.steps);
        } else if (!input[key] && this.is_down(key)) {
          this.inputs["" + key + "_up"].push(this.steps);
        }
      }
      if (input.space) {
        this.inputs['space_pressed'].push(this.steps);
      }
      if (this.steps % 30 === 0) {
        milestone = this.milestones[this.steps.toString()] = {};
        _ref1 = ['body', 'left_wheel', 'right_wheel', 'left_axle', 'right_axle'];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          part = _ref1[_j];
          milestone[part] = physics_values(moto[part]);
        }
        _ref2 = ['torso', 'upper_leg', 'lower_leg', 'upper_arm', 'lower_arm'];
        _results = [];
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          part = _ref2[_k];
          _results.push(milestone[part] = physics_values(rider[part]));
        }
        return _results;
      }
    };

    Replay.prototype.last = function(input) {
      var element, i, input_length, last_element, steps, _i, _len, _ref;
      last_element = null;
      input_length = this.inputs[input].length;
      steps = this.level.physics.steps;
      _ref = this.inputs[input];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        element = _ref[i];
        if (element <= steps && (i + 1 > input_length - 1 || this.inputs[input][i + 1] > steps)) {
          last_element = element;
          break;
        }
      }
      return last_element;
    };

    Replay.prototype.is_up = function(key) {
      return this.last("" + key + "_up") >= this.last("" + key + "_down");
    };

    Replay.prototype.is_down = function(key) {
      return this.last("" + key + "_down") >= this.last("" + key + "_up");
    };

    Replay.prototype.is_pressed = function(key) {
      return this.last("" + key + "_pressed") === this.level.physics.steps;
    };

    Replay.prototype.load = function(data) {
      var options;
      options = this.level.options;
      this.inputs = ReplayConversionService.string_to_inputs(data.split("\n")[0]);
      this.milestones = ReplayConversionService.string_to_milestones(data.split("\n")[1]);
      this.success = true;
      return this;
    };

    Replay.prototype.save = function() {
      console.log(ReplayConversionService.inputs_to_string(this.inputs));
      console.log(ReplayConversionService.milestones_to_string(this.milestones));
      return $.post(this.level.options.scores_path, {
        level: this.level.infos.identifier,
        time: this.level.current_time,
        steps: this.steps,
        replay: ReplayConversionService.inputs_to_string(this.inputs)
      });
    };

    return Replay;

  })();

  physics_values = function(object) {
    return {
      position: {
        x: object.GetPosition().x,
        y: object.GetPosition().y
      },
      angle: object.GetAngle(),
      linear_velocity: {
        x: object.GetLinearVelocity().x,
        y: object.GetLinearVelocity().y
      },
      angular_velocity: object.GetAngularVelocity()
    };
  };

  b2Vec2 = Box2D.Common.Math.b2Vec2;

  b2BodyDef = Box2D.Dynamics.b2BodyDef;

  b2Body = Box2D.Dynamics.b2Body;

  b2FixtureDef = Box2D.Dynamics.b2FixtureDef;

  b2Fixture = Box2D.Dynamics.b2Fixture;

  b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape;

  b2CircleShape = Box2D.Collision.Shapes.b2CircleShape;

  b2PrismaticJointDef = Box2D.Dynamics.Joints.b2PrismaticJointDef;

  b2RevoluteJointDef = Box2D.Dynamics.Joints.b2RevoluteJointDef;

  Rider = (function() {
    function Rider(level, moto) {
      this.level = level;
      this.assets = level.assets;
      this.world = level.physics.world;
      this.moto = moto;
      this.mirror = moto.mirror;
      this.ghost = moto.ghost;
    }

    Rider.prototype.destroy = function() {
      this.world.DestroyBody(this.head);
      this.world.DestroyBody(this.torso);
      this.world.DestroyBody(this.lower_leg);
      this.world.DestroyBody(this.upper_leg);
      this.world.DestroyBody(this.lower_arm);
      return this.world.DestroyBody(this.upper_arm);
    };

    Rider.prototype.init = function() {
      var part, parts, _i, _len;
      parts = [Constants.torso, Constants.upper_leg, Constants.lower_leg, Constants.upper_arm, Constants.lower_arm];
      for (_i = 0, _len = parts.length; _i < _len; _i++) {
        part = parts[_i];
        if (this.ghost) {
          this.assets.moto.push(part.ghost_texture);
        } else {
          this.assets.moto.push(part.texture);
        }
      }
      this.player_start = this.level.entities.player_start;
      this.head = this.create_head();
      this.torso = this.create_part(Constants.torso, 'torso');
      this.lower_leg = this.create_part(Constants.lower_leg, 'lower_leg');
      this.upper_leg = this.create_part(Constants.upper_leg, 'upper_leg');
      this.lower_arm = this.create_part(Constants.lower_arm, 'lower_arm');
      this.upper_arm = this.create_part(Constants.upper_arm, 'upper_arm');
      this.neck_joint = this.create_neck_joint();
      this.ankle_joint = this.create_joint(Constants.ankle, this.lower_leg, this.moto.body);
      this.wrist_joint = this.create_joint(Constants.wrist, this.lower_arm, this.moto.body);
      this.knee_joint = this.create_joint(Constants.knee, this.lower_leg, this.upper_leg);
      this.elbow_joint = this.create_joint(Constants.elbow, this.upper_arm, this.lower_arm);
      this.shoulder_joint = this.create_joint(Constants.shoulder, this.upper_arm, this.torso, true);
      return this.hip_joint = this.create_joint(Constants.hip, this.upper_leg, this.torso, true);
    };

    Rider.prototype.position = function() {
      return this.moto.body.GetPosition();
    };

    Rider.prototype.eject = function() {
      var adjusted_force_vector, eject_angle, force_vector;
      if (!this.moto.dead) {
        this.level.listeners.kill_moto(this.moto);
        force_vector = {
          x: 150.0 * this.moto.mirror,
          y: 0
        };
        eject_angle = this.mirror * this.moto.body.GetAngle() + Math.PI / 4.0;
        adjusted_force_vector = Math2D.rotate_point(force_vector, eject_angle, {
          x: 0,
          y: 0
        });
        return this.torso.ApplyForce(adjusted_force_vector, this.torso.GetWorldCenter());
      }
    };

    Rider.prototype.create_head = function() {
      var body, bodyDef, fixDef;
      fixDef = new b2FixtureDef();
      fixDef.shape = new b2CircleShape(Constants.head.radius);
      fixDef.density = Constants.head.density;
      fixDef.restitution = Constants.head.restitution;
      fixDef.friction = Constants.head.friction;
      fixDef.isSensor = !Constants.head.collisions;
      fixDef.filter.groupIndex = -1;
      bodyDef = new b2BodyDef();
      bodyDef.position.x = this.player_start.x + this.mirror * Constants.head.position.x;
      bodyDef.position.y = this.player_start.y + Constants.head.position.y;
      bodyDef.userData = {
        name: 'rider',
        part: 'head',
        rider: this
      };
      bodyDef.type = b2Body.b2_dynamicBody;
      body = this.world.CreateBody(bodyDef);
      body.CreateFixture(fixDef);
      return body;
    };

    Rider.prototype.create_part = function(part_constants, name) {
      var body, bodyDef, fixDef;
      fixDef = new b2FixtureDef();
      fixDef.shape = new b2PolygonShape();
      fixDef.density = part_constants.density;
      fixDef.restitution = part_constants.restitution;
      fixDef.friction = part_constants.friction;
      fixDef.isSensor = !part_constants.collisions;
      fixDef.filter.groupIndex = -1;
      Physics.create_shape(fixDef, part_constants.shape, this.mirror === -1);
      bodyDef = new b2BodyDef();
      bodyDef.position.x = this.player_start.x + this.mirror * part_constants.position.x;
      bodyDef.position.y = this.player_start.y + part_constants.position.y;
      bodyDef.angle = this.mirror * part_constants.angle;
      bodyDef.userData = {
        name: 'rider',
        part: name,
        rider: this
      };
      bodyDef.type = b2Body.b2_dynamicBody;
      body = this.world.CreateBody(bodyDef);
      body.CreateFixture(fixDef);
      return body;
    };

    Rider.prototype.set_joint_commons = function(joint) {
      if (this.mirror === 1) {
        joint.lowerAngle = -Math.PI / 15;
        joint.upperAngle = Math.PI / 108;
      } else if (this.mirror === -1) {
        joint.lowerAngle = -Math.PI / 108;
        joint.upperAngle = Math.PI / 15;
      }
      return joint.enableLimit = true;
    };

    Rider.prototype.create_neck_joint = function() {
      var axe, jointDef, position;
      position = this.head.GetWorldCenter();
      axe = {
        x: position.x,
        y: position.y
      };
      jointDef = new b2RevoluteJointDef();
      jointDef.Initialize(this.head, this.torso, axe);
      return this.world.CreateJoint(jointDef);
    };

    Rider.prototype.create_joint = function(joint_constants, part1, part2, invert_joint) {
      var axe, jointDef, position;
      if (invert_joint == null) {
        invert_joint = false;
      }
      position = part1.GetWorldCenter();
      axe = {
        x: position.x + this.mirror * joint_constants.axe_position.x,
        y: position.y + joint_constants.axe_position.y
      };
      jointDef = new b2RevoluteJointDef();
      if (invert_joint) {
        jointDef.Initialize(part2, part1, axe);
      } else {
        jointDef.Initialize(part1, part2, axe);
      }
      this.set_joint_commons(jointDef);
      return this.world.CreateJoint(jointDef);
    };

    Rider.prototype.display = function() {
      this.display_part(this.torso, Constants.torso);
      this.display_part(this.upper_leg, Constants.upper_leg);
      this.display_part(this.lower_leg, Constants.lower_leg);
      this.display_part(this.upper_arm, Constants.upper_arm);
      return this.display_part(this.lower_arm, Constants.lower_arm);
    };

    Rider.prototype.display_part = function(part, part_constants) {
      var angle, position, texture;
      position = part.GetPosition();
      angle = part.GetAngle();
      texture = this.ghost ? part_constants.ghost_texture : part_constants.texture;
      this.level.ctx.save();
      this.level.ctx.translate(position.x, position.y);
      this.level.ctx.scale(this.mirror, -1);
      this.level.ctx.rotate(this.mirror * (-angle));
      this.level.ctx.drawImage(this.level.assets.get(texture), -part_constants.texture_size.x / 2, -part_constants.texture_size.y / 2, part_constants.texture_size.x, part_constants.texture_size.y);
      return this.level.ctx.restore();
    };

    return Rider;

  })();

  MotoFlipService = (function() {
    function MotoFlipService() {}

    MotoFlipService.execute = function(moto) {
      var body, head, left_axle, left_wheel, lower_arm, lower_leg, right_axle, right_wheel, torso, upper_arm, upper_leg;
      body = {
        position: moto.body.GetPosition(),
        angle: moto.body.GetAngle(),
        linear: moto.body.GetLinearVelocity(),
        angular: moto.body.GetAngularVelocity()
      };
      left_wheel = {
        position: moto.left_wheel.GetPosition(),
        angle: moto.left_wheel.GetAngle(),
        linear: moto.left_wheel.GetLinearVelocity(),
        angular: moto.left_wheel.GetAngularVelocity()
      };
      right_wheel = {
        position: moto.right_wheel.GetPosition(),
        angle: moto.right_wheel.GetAngle(),
        linear: moto.right_wheel.GetLinearVelocity(),
        angular: moto.right_wheel.GetAngularVelocity()
      };
      left_axle = {
        position: moto.left_axle.GetPosition(),
        angle: moto.left_axle.GetAngle(),
        linear: moto.left_axle.GetLinearVelocity(),
        angular: moto.left_axle.GetAngularVelocity()
      };
      right_axle = {
        position: moto.right_axle.GetPosition(),
        angle: moto.right_axle.GetAngle(),
        linear: moto.right_axle.GetLinearVelocity(),
        angular: moto.right_axle.GetAngularVelocity()
      };
      head = {
        position: moto.rider.head.GetPosition(),
        angle: moto.rider.head.GetAngle(),
        linear: moto.rider.head.GetLinearVelocity(),
        angular: moto.rider.head.GetAngularVelocity()
      };
      torso = {
        position: moto.rider.torso.GetPosition(),
        angle: moto.rider.torso.GetAngle(),
        linear: moto.rider.torso.GetLinearVelocity(),
        angular: moto.rider.torso.GetAngularVelocity()
      };
      lower_leg = {
        position: moto.rider.lower_leg.GetPosition(),
        angle: moto.rider.lower_leg.GetAngle(),
        linear: moto.rider.lower_leg.GetLinearVelocity(),
        angular: moto.rider.lower_leg.GetAngularVelocity()
      };
      upper_leg = {
        position: moto.rider.upper_leg.GetPosition(),
        angle: moto.rider.upper_leg.GetAngle(),
        linear: moto.rider.upper_leg.GetLinearVelocity(),
        angular: moto.rider.upper_leg.GetAngularVelocity()
      };
      lower_arm = {
        position: moto.rider.lower_arm.GetPosition(),
        angle: moto.rider.lower_arm.GetAngle(),
        linear: moto.rider.lower_arm.GetLinearVelocity(),
        angular: moto.rider.lower_arm.GetAngularVelocity()
      };
      upper_arm = {
        position: moto.rider.upper_arm.GetPosition(),
        angle: moto.rider.upper_arm.GetAngle(),
        linear: moto.rider.upper_arm.GetLinearVelocity(),
        angular: moto.rider.upper_arm.GetAngularVelocity()
      };
      moto.mirror = moto.rider.mirror = -moto.mirror;
      moto.destroy();
      moto.init();
      moto.body.SetPosition(body.position);
      moto.body.SetAngle(body.angle);
      moto.body.SetLinearVelocity(body.linear);
      moto.body.SetAngularVelocity(body.angular);
      moto.left_wheel.SetPosition(right_wheel.position);
      moto.left_wheel.SetAngle(-left_wheel.angle);
      moto.left_wheel.SetLinearVelocity(right_wheel.linear);
      moto.left_wheel.SetAngularVelocity(-left_wheel.angular);
      moto.right_wheel.SetPosition(left_wheel.position);
      moto.right_wheel.SetAngle(-right_wheel.angle);
      moto.right_wheel.SetLinearVelocity(left_wheel.linear);
      moto.right_wheel.SetAngularVelocity(-right_wheel.angular);
      moto.left_axle.SetPosition(left_axle.position);
      moto.left_axle.SetAngle(left_axle.angle);
      moto.left_axle.SetLinearVelocity(left_axle.linear);
      moto.left_axle.SetAngularVelocity(left_axle.angular);
      moto.right_axle.SetPosition(right_axle.position);
      moto.right_axle.SetAngle(right_axle.angle);
      moto.right_axle.SetLinearVelocity(right_axle.linear);
      moto.right_axle.SetAngularVelocity(right_axle.angular);
      moto.rider.head.SetPosition(head.position);
      moto.rider.head.SetAngle(head.angle);
      moto.rider.head.SetLinearVelocity(head.linear);
      moto.rider.head.SetAngularVelocity(head.angular);
      moto.rider.torso.SetPosition(torso.position);
      moto.rider.torso.SetAngle(torso.angle);
      moto.rider.torso.SetLinearVelocity(torso.linear);
      moto.rider.torso.SetAngularVelocity(torso.angular);
      moto.rider.lower_leg.SetPosition(lower_leg.position);
      moto.rider.lower_leg.SetAngle(lower_leg.angle);
      moto.rider.lower_leg.SetLinearVelocity(lower_leg.linear);
      moto.rider.lower_leg.SetAngularVelocity(lower_leg.angular);
      moto.rider.upper_leg.SetPosition(upper_leg.position);
      moto.rider.upper_leg.SetAngle(upper_leg.angle);
      moto.rider.upper_leg.SetLinearVelocity(upper_leg.linear);
      moto.rider.upper_leg.SetAngularVelocity(upper_leg.angular);
      moto.rider.lower_arm.SetPosition(lower_arm.position);
      moto.rider.lower_arm.SetAngle(lower_arm.angle);
      moto.rider.lower_arm.SetLinearVelocity(lower_arm.linear);
      moto.rider.lower_arm.SetAngularVelocity(lower_arm.angular);
      moto.rider.upper_arm.SetPosition(upper_arm.position);
      moto.rider.upper_arm.SetAngle(upper_arm.angle);
      moto.rider.upper_arm.SetLinearVelocity(upper_arm.linear);
      return moto.rider.upper_arm.SetAngularVelocity(upper_arm.angular);
    };

    return MotoFlipService;

  })();

  ReplayConversionService = (function() {
    function ReplayConversionService() {}

    ReplayConversionService.inputs_to_string = function(inputs) {
      var key, step, string, _i, _j, _len, _len1, _ref, _ref1;
      string = '';
      _ref = ['up_down', 'up_up', 'down_down', 'down_up', 'left_down', 'left_up', 'right_down', 'right_up', 'space_pressed'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        string += "" + key + ":";
        _ref1 = inputs[key];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          step = _ref1[_j];
          string += "" + step + ",";
        }
        if (string[string.length - 1] === ',') {
          string = string.slice(0, -1);
        }
        string += '|';
      }
      string = string.slice(0, -1);
      return LZString.compressToBase64(string);
    };

    ReplayConversionService.string_to_inputs = function(string) {
      var i, inputs, key, keys, name, splitted, step, values, _i, _j, _len, _len1;
      inputs = {};
      string = LZString.decompressFromBase64(string);
      keys = string.split('|');
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        splitted = key.split(':');
        name = splitted[0];
        values = splitted[1].split(',');
        inputs[name] = [];
        if (values[0] !== '') {
          for (i = _j = 0, _len1 = values.length; _j < _len1; i = ++_j) {
            step = values[i];
            inputs[name][i] = parseInt(step);
          }
        }
      }
      return inputs;
    };

    ReplayConversionService.milestones_to_string = function(milestones) {
      var a, b, c, d, e, f, key, milestone, step, string, _i, _len, _ref;
      string = '30@';
      for (step in milestones) {
        milestone = milestones[step];
        _ref = ['body', 'left_wheel', 'right_wheel', 'left_axle', 'right_axle', 'torso', 'upper_leg', 'lower_leg', 'upper_arm', 'lower_arm'];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          a = milestone[key].position.x;
          b = milestone[key].position.y;
          c = milestone[key].angle;
          d = milestone[key].linear_velocity.x;
          e = milestone[key].linear_velocity.y;
          f = milestone[key].angular_velocity;
          string += "" + a + "," + b + "," + c + "," + d + "," + e + "," + f + "|";
        }
        string = string.slice(0, -1);
        string += '=';
      }
      string = string.slice(0, -1);
      return LZString.compressToBase64(string);
    };

    ReplayConversionService.string_to_milestones = function(string) {
      var current_interval, element, i, milestone, milestone_string, milestones, milestones_string, part_string, step_interval, value_string, _i, _j, _len, _len1, _ref, _ref1;
      milestones = {};
      string = LZString.decompressFromBase64(string);
      milestones_string = string.split('@')[1];
      step_interval = parseInt(string.split('@')[0]);
      current_interval = step_interval;
      _ref = milestones_string.split('=');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        milestone_string = _ref[_i];
        milestone = {};
        part_string = milestone_string.split('|');
        _ref1 = ['body', 'left_wheel', 'right_wheel', 'left_axle', 'right_axle', 'torso', 'upper_leg', 'lower_leg', 'upper_arm', 'lower_arm'];
        for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
          element = _ref1[i];
          value_string = part_string[i].split(',');
          milestone[element] = {
            position: {
              x: parseFloat(value_string[0]),
              y: parseFloat(value_string[1])
            },
            angle: parseFloat(value_string[2]),
            linear_velocity: {
              x: parseFloat(value_string[3]),
              y: parseFloat(value_string[4])
            },
            angular_velocity: parseFloat(value_string[5])
          };
        }
        milestones[current_interval] = milestone;
        current_interval += step_interval;
      }
      return milestones;
    };

    return ReplayConversionService;

  })();

  Assets = (function() {
    function Assets() {
      this.queue = new createjs.LoadQueue(false);
      this.theme = new Theme('modern.xml');
      this.textures = [];
      this.anims = [];
      this.effects = [];
      this.moto = [];
      this.sounds = [];
    }

    Assets.prototype.load = function(callback) {
      var item, items, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
      items = [];
      _ref = this.textures;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        items.push({
          id: item,
          src: "/data/Textures/Textures/" + (item.toLowerCase())
        });
      }
      _ref1 = this.anims;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        item = _ref1[_j];
        items.push({
          id: item,
          src: "/data/Textures/Anims/" + (item.toLowerCase())
        });
      }
      _ref2 = this.effects;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        item = _ref2[_k];
        items.push({
          id: item,
          src: "/data/Textures/Effects/" + (item.toLowerCase())
        });
      }
      _ref3 = this.moto;
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        item = _ref3[_l];
        items.push({
          id: item,
          src: "/data/Textures/Riders/" + (item.toLowerCase()) + ".png"
        });
      }
      items = this.remove_duplicate_textures(items);
      this.queue.addEventListener("complete", callback);
      return this.queue.loadManifest(items);
    };

    Assets.prototype.get = function(name) {
      return this.queue.getResult(name);
    };

    Assets.prototype.remove_duplicate_textures = function(array) {
      var found, image, unique, unique_image, _i, _j, _len, _len1;
      unique = [];
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        image = array[_i];
        found = false;
        for (_j = 0, _len1 = unique.length; _j < _len1; _j++) {
          unique_image = unique[_j];
          if (image.id === unique_image.id) {
            found = true;
          }
        }
        if (!found) {
          unique.push(image);
        }
      }
      return unique;
    };

    return Assets;

  })();

  bind_debug_button = function() {
    $('#debug .debug-button').on('click', function() {
      window.location = '?level=' + $("#levels option:selected").text() + '&debug=false';
      return false;
    });
    return $('.normal-button').on('click', function() {
      window.location = '?level=' + $("#levels option:selected").text();
      return false;
    });
  };

  bind_delete_params_buttons = function() {
    return $("#debug span.delete").on('click', function() {
      $(this).closest('.template').remove();
      return $('#debug form').submit();
    });
  };

  override_constants_by_url_params = function(params) {
    var array, array_key, array_keys, i, key, value, _i, _len;
    for (key in params) {
      value = params[key];
      array_keys = key.split('.');
      array = Constants;
      for (i = _i = 0, _len = array_keys.length; _i < _len; i = ++_i) {
        array_key = array_keys[i];
        if (i === array_keys.length - 1) {
          if (value === '') {
            delete params[key];
          } else {
            if (value === 'true' || value === 'false') {
              array[array_key] = value === 'true';
            } else if (array_key !== 'level') {
              array[array_key] = parseFloat(value);
            }
          }
        } else {
          array = array[array_key];
        }
      }
    }
    return Constants.chain_reaction();
  };

  display_constants = function() {
    var html, key, sub_key, sub_value, value, _i, _len, _ref, _ref1;
    html = '<ul>';
    _ref = Object.keys(Constants);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      key = _ref[_i];
      value = Constants[key];
      if (typeof value !== 'object' && typeof value !== 'function') {
        html += "<li><a href=\"" + document.URL + "&" + key + "=" + value + "\">" + key + "</a> (" + value + ")</li>";
      } else {
        html += "<li>" + key + "<ul>";
        _ref1 = Constants[key];
        for (sub_key in _ref1) {
          sub_value = _ref1[sub_key];
          if (typeof sub_value !== 'object') {
            html += "<li><a href=\"" + document.URL + "&" + key + "." + sub_key + "=" + sub_value + "\">" + sub_key + "</a> (" + sub_value + ")</li>";
          }
        }
        html += "</ul></li>";
      }
    }
    html += '</ul>';
    $('#debug .variables').html(html);
    return $("ul > li > ul:not(:has(> li))").parent().hide();
  };

  create_form_with_url_params = function(params) {
    var key, new_input, value, _results;
    _results = [];
    for (key in params) {
      value = params[key];
      new_input = $('form.debug .template:first').clone().insertBefore('form.debug input[type=submit]');
      new_input.find('label').attr('for', key).text(key);
      new_input.find('input').attr('name', key).attr('id', key).val(value);
      new_input.show();
      _results.push($('form.debug .template:first').hide());
    }
    return _results;
  };

  $(function() {
    var params;
    params = $.url().param();
    if ($('#debug').length && Object.keys(params).length > 1) {
      $('.debug').show();
      $('.debug-button').hide();
      $('body').addClass('debug');
      override_constants_by_url_params(params);
      create_form_with_url_params(params);
      display_constants();
    }
    bind_debug_button();
    return bind_delete_params_buttons();
  });

  Math2D = (function() {
    function Math2D() {}

    Math2D.distance_between_points = function(point1, point2) {
      var a, b;
      a = Math.pow(point1.x - point2.x, 2);
      b = Math.pow(point1.y - point2.y, 2);
      return Math.sqrt(a + b);
    };

    Math2D.angle_between_points = function(point1, point2) {
      if (point1.y - point2.y === 0) {
        if (point1.y > point2.y) {
          return Math.PI / 2;
        } else {
          return -Math.PI / 2;
        }
      } else {
        if (point1.y > point2.y) {
          return -Math.atan((point1.x - point2.x) / (point1.y - point2.y));
        } else {
          return -Math.atan((point2.x - point1.x) / (point2.y - point1.y)) + Math.PI;
        }
      }
    };

    Math2D.rotate_point = function(point, angle, rotation_axe) {
      var new_point;
      return new_point = {
        x: rotation_axe.x + point.x * Math.cos(angle) - point.y * Math.sin(angle),
        y: rotation_axe.y + point.x * Math.sin(angle) + point.y * Math.cos(angle)
      };
    };

    Math2D.not_collinear_vertices = function(vertices) {
      var i, size, vertex, _i, _len;
      size = vertices.length;
      for (i = _i = 0, _len = vertices.length; _i < _len; i = ++_i) {
        vertex = vertices[i];
        if (vertex.x === vertices[(i + 1) % size].x && vertices[(i + 2) % size].x) {
          vertex.x = vertex.x + 0.001;
          vertices[(i + 1) % size].x = vertex.x - 0.001;
        }
        if (vertex.y === vertices[(i + 1) % size].y && vertices[(i + 2) % size].y) {
          vertex.y = vertex.y + 0.001;
          vertices[(i + 1) % size].y = vertex.y - 0.001;
        }
      }
      return false;
    };

    return Math2D;

  })();

  Theme = (function() {
    function Theme(file_name) {
      this.sprites = [];
      this.edges = [];
      this.textures = [];
      $.ajax({
        type: "GET",
        url: "/data/Themes/" + file_name,
        dataType: "xml",
        success: this.load_theme,
        async: false,
        context: this
      });
    }

    Theme.prototype.load_theme = function(xml) {
      var xml_sprite, xml_sprites, _i, _len, _results;
      xml_sprites = $(xml).find('sprite');
      _results = [];
      for (_i = 0, _len = xml_sprites.length; _i < _len; _i++) {
        xml_sprite = xml_sprites[_i];
        if ($(xml_sprite).attr('type') === 'Entity') {
          _results.push(this.sprites[$(xml_sprite).attr('name')] = {
            file: $(xml_sprite).attr('file'),
            file_base: $(xml_sprite).attr('fileBase'),
            file_ext: $(xml_sprite).attr('fileExtension'),
            size: {
              width: parseFloat($(xml_sprite).attr('width')),
              height: parseFloat($(xml_sprite).attr('height'))
            },
            center: {
              x: parseFloat($(xml_sprite).attr('centerX')),
              y: parseFloat($(xml_sprite).attr('centerY'))
            },
            frames: $(xml_sprite).find('frame').length,
            delay: parseFloat($(xml_sprite).attr('delay'))
          });
        } else if ($(xml_sprite).attr('type') === 'EdgeEffect') {
          _results.push(this.edges[$(xml_sprite).attr('name').toLowerCase()] = {
            file: $(xml_sprite).attr('file').toLowerCase(),
            scale: parseFloat($(xml_sprite).attr('scale')),
            depth: parseFloat($(xml_sprite).attr('depth'))
          });
        } else if ($(xml_sprite).attr('type') === 'Texture') {
          _results.push(this.textures[$(xml_sprite).attr('name').toLowerCase()] = {
            file: $(xml_sprite).attr('file') ? $(xml_sprite).attr('file').toLowerCase() : void 0,
            file_base: $(xml_sprite).attr('fileBase'),
            file_ext: $(xml_sprite).attr('fileExtension'),
            frames: $(xml_sprite).find('frame').length,
            delay: parseFloat($(xml_sprite).attr('delay'))
          });
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Theme.prototype.sprite_params = function(name) {
      return this.sprites[name];
    };

    Theme.prototype.edge_params = function(name) {
      return this.edges[name];
    };

    Theme.prototype.texture_params = function(name) {
      return this.textures[name];
    };

    return Theme;

  })();

}).call(this);
