// Generated by CoffeeScript 1.6.3
(function() {
  var Assets, Blocks, Entities, Infos, Input, LayerOffsets, Level, Limits, Math2D, Moto, Physics, Script, Sky, b2AABB, b2Body, b2BodyDef, b2CircleShape, b2DebugDraw, b2Fixture, b2FixtureDef, b2MassData, b2MouseJointDef, b2PolygonShape, b2PrismaticJointDef, b2RevoluteJointDef, b2Settings, b2Vec2, b2World, triangulate;

  Assets = (function() {
    function Assets() {
      this.queue = new createjs.LoadQueue();
      this.textures = [];
      this.anims = [];
      this.moto = [];
    }

    Assets.prototype.load = function(callback) {
      var item, items, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      items = [];
      _ref = this.textures;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        items.push({
          id: item,
          src: "data/Textures/Textures/" + item + ".jpg"
        });
      }
      _ref1 = this.anims;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        item = _ref1[_j];
        items.push({
          id: item,
          src: "data/Textures/Anims/" + item + ".png"
        });
      }
      _ref2 = this.moto;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        item = _ref2[_k];
        items.push({
          id: item,
          src: "data/Textures/Riders/" + item + ".png"
        });
      }
      this.queue.addEventListener("complete", callback);
      return this.queue.loadManifest(items);
    };

    Assets.prototype.get = function(name) {
      return this.queue.getResult(name);
    };

    return Assets;

  })();

  Blocks = (function() {
    function Blocks(level) {
      this.level = level;
      this.assets = level.assets;
      this.list = [];
      this.back_list = [];
      this.front_list = [];
    }

    Blocks.prototype.parse = function(xml) {
      var block, material, vertex, xml_block, xml_blocks, xml_material, xml_materials, xml_vertex, xml_vertices, _i, _j, _k, _len, _len1, _len2;
      xml_blocks = $(xml).find('block');
      for (_i = 0, _len = xml_blocks.length; _i < _len; _i++) {
        xml_block = xml_blocks[_i];
        block = {
          id: $(xml_block).attr('id'),
          position: {
            x: parseFloat($(xml_block).find('position').attr('x')),
            y: parseFloat($(xml_block).find('position').attr('y')),
            dynamic: $(xml_block).find('position').attr('dynamic') === 'true',
            background: $(xml_block).find('position').attr('background') === 'true'
          },
          usetexture: {
            id: $(xml_block).find('usetexture').attr('id').toLowerCase(),
            scale: parseFloat($(xml_block).find('usetexture').attr('scale'))
          },
          physics: {
            grip: parseFloat($(xml_block).find('physics').attr('grip'))
          },
          edges: {
            angle: parseFloat($(xml_block).find('edges').attr('angle')),
            materials: []
          },
          vertices: []
        };
        if (block.usetexture.id === 'default') {
          block.usetexture.id = 'dirt';
        }
        xml_materials = $(xml_block).find('edges material');
        for (_j = 0, _len1 = xml_materials.length; _j < _len1; _j++) {
          xml_material = xml_materials[_j];
          material = {
            name: $(xml_material).attr('name'),
            edge: $(xml_material).attr('edge'),
            color_r: parseInt($(xml_material).attr('color_r')),
            color_g: parseInt($(xml_material).attr('color_g')),
            color_b: parseInt($(xml_material).attr('color_b')),
            color_a: parseInt($(xml_material).attr('color_a')),
            scale: parseFloat($(xml_material).attr('scale')),
            depth: parseFloat($(xml_material).attr('depth'))
          };
          block.edges.materials.push(material);
        }
        xml_vertices = $(xml_block).find('vertex');
        for (_k = 0, _len2 = xml_vertices.length; _k < _len2; _k++) {
          xml_vertex = xml_vertices[_k];
          vertex = {
            x: parseFloat($(xml_vertex).attr('x')),
            y: parseFloat($(xml_vertex).attr('y')),
            edge: $(xml_vertex).attr('edge')
          };
          block.vertices.push(vertex);
        }
        this.list.push(block);
        if (block.position.background) {
          this.back_list.push(block);
        } else {
          this.front_list.push(block);
        }
      }
      this.back_list.reverse();
      this.front_list;
      return this;
    };

    Blocks.prototype.init = function() {
      var block, triangle, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = this.list;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        block = _ref[_i];
        this.assets.textures.push(block.usetexture.id);
      }
      this.triangles = triangulate(this.front_list);
      _ref1 = this.triangles;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        triangle = _ref1[_j];
        _results.push(this.level.physics.createPolygon(triangle));
      }
      return _results;
    };

    Blocks.prototype.display = function(ctx) {
      var block, i, vertex, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = this.back_list.concat(this.front_list);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        block = _ref[_i];
        ctx.beginPath();
        _ref1 = block.vertices;
        for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
          vertex = _ref1[i];
          if (i === 0) {
            ctx.moveTo(block.position.x + vertex.x, block.position.y + vertex.y);
          } else {
            ctx.lineTo(block.position.x + vertex.x, block.position.y + vertex.y);
          }
        }
        ctx.closePath();
        ctx.save();
        ctx.scale(1.0 / this.level.scale.x, 1.0 / this.level.scale.y);
        ctx.fillStyle = ctx.createPattern(this.assets.get(block.usetexture.id), 'repeat');
        ctx.fill();
        _results.push(ctx.restore());
      }
      return _results;
    };

    return Blocks;

  })();

  triangulate = function(blocks) {
    var block, set_of_triangles, triangle, triangles, triangulation, vertex, vertices, _i, _j, _k, _len, _len1, _len2, _ref;
    triangles = [];
    for (_i = 0, _len = blocks.length; _i < _len; _i++) {
      block = blocks[_i];
      vertices = [];
      _ref = block.vertices;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        vertex = _ref[_j];
        vertices.push(new poly2tri.Point(block.position.x + vertex.x, block.position.y + vertex.y));
      }
      triangulation = new poly2tri.SweepContext(vertices, {
        cloneArrays: true
      });
      triangulation.triangulate();
      set_of_triangles = triangulation.getTriangles();
      for (_k = 0, _len2 = set_of_triangles.length; _k < _len2; _k++) {
        triangle = set_of_triangles[_k];
        triangles.push([
          {
            x: triangle.points_[0].x,
            y: triangle.points_[0].y
          }, {
            x: triangle.points_[1].x,
            y: triangle.points_[1].y
          }, {
            x: triangle.points_[2].x,
            y: triangle.points_[2].y
          }
        ]);
      }
    }
    return triangles;
  };

  Entities = (function() {
    function Entities(level) {
      this.level = level;
      this.assets = level.assets;
      this.list = [];
    }

    Entities.prototype.parse = function(xml) {
      var entity, param, xml_entities, xml_entity, xml_param, xml_params, _i, _j, _len, _len1;
      xml_entities = $(xml).find('entity');
      for (_i = 0, _len = xml_entities.length; _i < _len; _i++) {
        xml_entity = xml_entities[_i];
        entity = {
          id: $(xml_entity).attr('id'),
          type_id: $(xml_entity).attr('typeid'),
          size: {
            r: parseFloat($(xml_entity).find('size').attr('r')),
            width: parseFloat($(xml_entity).find('size').attr('width')),
            height: parseFloat($(xml_entity).find('size').attr('height'))
          },
          position: {
            x: parseFloat($(xml_entity).find('position').attr('x')),
            y: parseFloat($(xml_entity).find('position').attr('y')),
            angle: parseFloat($(xml_entity).find('position').attr('angle'))
          },
          params: []
        };
        xml_params = $(xml_entity).find('param');
        for (_j = 0, _len1 = xml_params.length; _j < _len1; _j++) {
          xml_param = xml_params[_j];
          param = {
            name: $(xml_param).attr('name'),
            value: $(xml_param).attr('value').toLowerCase()
          };
          entity.params.push(param);
        }
        this.list.push(entity);
      }
      return this;
    };

    Entities.prototype.init = function() {
      var entity, param, _i, _len, _ref, _results;
      _ref = this.list;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        if (entity.type_id === 'Sprite') {
          _results.push((function() {
            var _j, _len1, _ref1, _results1;
            _ref1 = entity.params;
            _results1 = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              param = _ref1[_j];
              if (param.name === 'name') {
                _results1.push(this.assets.anims.push(param.value));
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          }).call(this));
        } else if (entity.type_id === 'EndOfLevel') {
          _results.push(this.assets.anims.push('flower00'));
        } else if (entity.type_id === 'PlayerStart') {
          _results.push(this.player_start = {
            x: entity.position.x,
            y: entity.position.y
          });
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Entities.prototype.display = function(ctx) {
      var entity, image, param, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = this.list;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        if (entity.type_id === 'Sprite') {
          _ref1 = entity.params;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            param = _ref1[_j];
            if (param.name === 'name') {
              image = param.value;
            }
          }
          ctx.save();
          ctx.translate(entity.position.x, entity.position.y);
          ctx.scale(1, -1);
          ctx.drawImage(this.assets.get(image), 0, -entity.size.r * 4, entity.size.r * 4, entity.size.r * 4);
          _results.push(ctx.restore());
        } else if (entity.type_id === 'EndOfLevel') {
          ctx.save();
          ctx.translate(entity.position.x - entity.size.r, entity.position.y - entity.size.r);
          ctx.scale(1, -1);
          ctx.drawImage(this.assets.get('flower00'), 0, -entity.size.r * 4, entity.size.r * 4, entity.size.r * 4);
          _results.push(ctx.restore());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Entities;

  })();

  Infos = (function() {
    function Infos(level) {
      this.level = level;
      this.assets = level.assets;
    }

    Infos.prototype.parse = function(xml) {
      var xml_border, xml_infos, xml_level, xml_music;
      xml_level = $(xml).find('level');
      this.identifier = xml_level.attr('id');
      this.pack_name = xml_level.attr('levelpack');
      this.pack_id = xml_level.attr('levelpackNum');
      this.r_version = xml_level.attr('rversion');
      xml_infos = $(xml).find('level').find('info');
      this.name = xml_infos.find('name').text();
      this.description = xml_infos.find('description').text();
      this.author = xml_infos.find('author').text();
      this.date = xml_infos.find('date').text();
      xml_border = xml_infos.find('border');
      this.border = xml_border.attr('texture');
      xml_music = xml_infos.find('music');
      this.music = xml_music.attr('name');
      return this;
    };

    Infos.prototype.init = function() {};

    Infos.prototype.display = function(ctx) {};

    return Infos;

  })();

  Input = (function() {
    function Input(level) {
      this.level = level;
      this.assets = level.assets;
    }

    Input.prototype.init = function() {
      this.disable_scroll();
      return this.init_keyboard();
    };

    Input.prototype.disable_scroll = function() {
      var keydown, keys, preventDefault;
      keys = [37, 38, 39, 40];
      preventDefault = function(e) {
        e = e || window.event;
        if (e.preventDefault) {
          e.preventDefault();
        }
        return e.returnValue = false;
      };
      keydown = function(e) {
        var i, _i, _len;
        for (_i = 0, _len = keys.length; _i < _len; _i++) {
          i = keys[_i];
          if (e.keyCode === i) {
            preventDefault(e);
            return;
          }
        }
      };
      return document.onkeydown = keydown;
    };

    Input.prototype.init_keyboard = function() {
      var _this = this;
      $(document).off('keydown');
      $(document).on('keydown', function(event) {
        switch (event.which || event.keyCode) {
          case 38:
            return _this.up = true;
          case 40:
            return _this.down = true;
          case 37:
            return _this.left = true;
          case 39:
            return _this.right = true;
          case 13:
            _this.level.moto = new Moto(_this.level);
            return _this.level.moto.init();
        }
      });
      return $(document).on('keyup', function(event) {
        switch (event.which || event.keyCode) {
          case 38:
            return _this.up = false;
          case 40:
            return _this.down = false;
          case 37:
            return _this.left = false;
          case 39:
            return _this.right = false;
        }
      });
    };

    Input.prototype.move_moto = function() {
      var force, moto, v, v_l, v_r;
      force = 24.1;
      moto = this.level.moto;
      if (this.up) {
        moto.left_wheel.ApplyTorque(-force / 3);
      }
      if (this.down) {
        v_r = moto.right_wheel.GetAngularVelocity();
        moto.right_wheel.ApplyTorque((Math.abs(v_r) >= 0.05 ? -v_r : void 0));
        v_l = moto.left_wheel.GetAngularVelocity();
        moto.left_wheel.ApplyTorque((Math.abs(v_l) >= 0.05 ? -v_l : void 0));
      }
      if (this.left) {
        moto.body.ApplyTorque(force / 3);
        moto.rider.torso.ApplyTorque(force / 3);
      }
      if (this.right) {
        moto.body.ApplyTorque(-force / 3);
        moto.rider.torso.ApplyTorque(-force / 3);
      }
      if (!this.up && !this.down) {
        v = moto.left_wheel.GetAngularVelocity();
        this.level.moto.left_wheel.ApplyTorque((Math.abs(v) >= 0.2 ? -v / 10 : void 0));
      }
      moto.left_prismatic_joint.SetMaxMotorForce(8 + Math.abs(800 * Math.pow(moto.left_prismatic_joint.GetJointTranslation(), 2)));
      moto.left_prismatic_joint.SetMotorSpeed(-3 * moto.left_prismatic_joint.GetJointTranslation());
      moto.right_prismatic_joint.SetMaxMotorForce(4 + Math.abs(800 * Math.pow(moto.right_prismatic_joint.GetJointTranslation(), 2)));
      return moto.right_prismatic_joint.SetMotorSpeed(-3 * moto.right_prismatic_joint.GetJointTranslation());
    };

    return Input;

  })();

  LayerOffsets = (function() {
    function LayerOffsets(level) {
      this.level = level;
      this.assets = level.assets;
      this.list = [];
    }

    LayerOffsets.prototype.parse = function(xml) {
      var layer_offset, xml_layer_offset, xml_layer_offsets, _i, _len;
      xml_layer_offsets = $(xml).find('layeroffsets layeroffset');
      for (_i = 0, _len = xml_layer_offsets.length; _i < _len; _i++) {
        xml_layer_offset = xml_layer_offsets[_i];
        layer_offset = {
          x: parseFloat($(xml_layer_offset).attr('x')),
          y: parseFloat($(xml_layer_offset).attr('y')),
          front_layer: $(xml_layer_offset).attr('frontlayer')
        };
        this.list.push(layer_offset);
      }
      return this;
    };

    LayerOffsets.prototype.init = function() {};

    LayerOffsets.prototype.display = function(ctx) {};

    return LayerOffsets;

  })();

  Level = (function() {
    function Level() {
      var canvas;
      canvas = $('#game').get(0);
      this.ctx = canvas.getContext('2d');
      this.scale = {
        x: 100,
        y: -100
      };
      this.assets = new Assets();
      this.physics = new Physics(this);
      this.world = this.physics.world;
      this.input = new Input(this);
      this.moto = new Moto(this);
      this.infos = new Infos(this);
      this.sky = new Sky(this);
      this.blocks = new Blocks(this);
      this.limits = new Limits(this);
      this.layer_offsets = new LayerOffsets(this);
      this.script = new Script(this);
      this.entities = new Entities(this);
    }

    Level.prototype.load_from_file = function(file_name) {
      return $.ajax({
        type: "GET",
        url: "data/Levels/" + file_name,
        dataType: "xml",
        success: this.load_level,
        async: false,
        context: this
      });
    };

    Level.prototype.load_level = function(xml) {
      this.infos.parse(xml).init();
      this.sky.parse(xml).init();
      this.blocks.parse(xml).init();
      this.limits.parse(xml).init();
      this.layer_offsets.parse(xml).init();
      this.script.parse(xml).init();
      this.entities.parse(xml).init();
      return this.moto.init();
    };

    Level.prototype.init_canvas = function() {
      this.canvas = $('#game').get(0);
      this.canvas_width = parseFloat(this.canvas.width);
      return this.canvas_height = parseFloat(this.canvas.height);
    };

    Level.prototype.init_input = function() {
      return this.input.init();
    };

    Level.prototype.display = function() {
      if (!this.canvas) {
        this.init_canvas();
      }
      $('#game').attr('height', this.canvas_height);
      this.ctx.translate(400.0, 300.0);
      this.ctx.scale(this.scale.x, this.scale.y);
      this.ctx.translate(-this.moto.position().x, -this.moto.position().y - 0.25);
      this.ctx.lineWidth = 0.01;
      this.sky.display(this.ctx);
      this.limits.display(this.ctx);
      this.blocks.display(this.ctx);
      this.entities.display(this.ctx);
      return this.moto.display(this.ctx);
    };

    return Level;

  })();

  Limits = (function() {
    function Limits(level) {
      this.level = level;
      this.assets = level.assets;
    }

    Limits.prototype.parse = function(xml) {
      var xml_limits;
      xml_limits = $(xml).find('limits');
      this.screen = {
        left: parseFloat(xml_limits.attr('left')) * 1.15,
        right: parseFloat(xml_limits.attr('right')) * 1.15,
        top: parseFloat(xml_limits.attr('top')) * 1.15,
        bottom: parseFloat(xml_limits.attr('bottom')) * 1.15
      };
      this.player = {
        left: parseFloat(xml_limits.attr('left')),
        right: parseFloat(xml_limits.attr('right')),
        top: parseFloat(xml_limits.attr('top')),
        bottom: parseFloat(xml_limits.attr('bottom'))
      };
      this.size = {
        x: this.screen.right - this.screen.left,
        y: this.screen.top - this.screen.bottom
      };
      return this;
    };

    Limits.prototype.init = function() {
      var vertices;
      this.assets.textures.push('dirt');
      vertices = [];
      vertices.push({
        x: this.screen.left,
        y: this.screen.top * 5
      });
      vertices.push({
        x: this.screen.left,
        y: this.screen.bottom
      });
      vertices.push({
        x: this.player.left,
        y: this.screen.bottom
      });
      vertices.push({
        x: this.player.left,
        y: this.screen.top * 5
      });
      this.level.physics.createPolygon(vertices);
      vertices = [];
      vertices.push({
        x: this.player.right,
        y: this.screen.top * 5
      });
      vertices.push({
        x: this.player.right,
        y: this.screen.bottom
      });
      vertices.push({
        x: this.screen.right,
        y: this.screen.bottom
      });
      vertices.push({
        x: this.screen.right,
        y: this.screen.top * 5
      });
      this.level.physics.createPolygon(vertices);
      vertices = [];
      vertices.push({
        x: this.player.right,
        y: this.player.bottom
      });
      vertices.push({
        x: this.player.left,
        y: this.player.bottom
      });
      vertices.push({
        x: this.player.left,
        y: this.screen.bottom
      });
      vertices.push({
        x: this.player.right,
        y: this.screen.bottom
      });
      return this.level.physics.createPolygon(vertices);
    };

    Limits.prototype.display = function(ctx) {
      ctx.beginPath();
      ctx.moveTo(this.screen.left, this.screen.top);
      ctx.lineTo(this.screen.left, this.screen.bottom);
      ctx.lineTo(this.player.left, this.screen.bottom);
      ctx.lineTo(this.player.left, this.screen.top);
      ctx.closePath();
      this.save_apply_texture_and_restore(ctx);
      ctx.beginPath();
      ctx.moveTo(this.screen.right, this.screen.top);
      ctx.lineTo(this.screen.right, this.screen.bottom);
      ctx.lineTo(this.player.right, this.screen.bottom);
      ctx.lineTo(this.player.right, this.screen.top);
      ctx.closePath();
      this.save_apply_texture_and_restore(ctx);
      ctx.beginPath();
      ctx.moveTo(this.player.right, this.player.bottom);
      ctx.lineTo(this.player.left, this.player.bottom);
      ctx.lineTo(this.player.left, this.screen.bottom);
      ctx.lineTo(this.player.right, this.screen.bottom);
      ctx.closePath();
      return this.save_apply_texture_and_restore(ctx);
    };

    Limits.prototype.save_apply_texture_and_restore = function(ctx) {
      ctx.save();
      ctx.scale(1.0 / this.level.scale.x, 1.0 / this.level.scale.y);
      ctx.fillStyle = ctx.createPattern(this.assets.get('dirt'), "repeat");
      ctx.fill();
      return ctx.restore();
    };

    return Limits;

  })();

  $(function() {
    var level;
    level = new Level();
    level.load_from_file('l3.lvl');
    level.init_input();
    return level.assets.load(function() {
      var update;
      update = function() {
        level.input.move_moto();
        level.world.Step(1.0 / 60.0, 10, 10);
        level.world.ClearForces();
        return level.display();
      };
      return setInterval(update, 1000 / 60);
    });
  });

  Math2D = (function() {
    function Math2D() {}

    Math2D.distance_between_points = function(point1, point2) {
      var a, b;
      a = Math.pow(point1.x - point2.x, 2);
      b = Math.pow(point1.y - point2.y, 2);
      return Math.sqrt(a + b);
    };

    Math2D.angle_between_points = function(point1, point2) {
      var adj, angle, opp;
      adj = point2.x - point1.x;
      opp = point2.y - point1.y;
      angle = Math.abs(Math.atan(opp / adj) * 180 / Math.PI);
      if (adj > 0 && opp < 0) {
        angle = 90 - angle;
      } else if (adj >= 0 && opp >= 0) {
        angle += 90;
      } else if (adj < 0 && opp >= 0) {
        angle = 180 + (90 - angle);
      } else {
        angle += 270;
      }
      return angle * Math.PI / 180.0;
    };

    Math2D.rotate_point = function(point, angle, rotation_axe) {
      var new_point;
      return new_point = {
        x: rotation_axe.x + point.x * Math.cos(angle) - point.y * Math.sin(angle),
        y: rotation_axe.y + point.x * Math.sin(angle) + point.y * Math.cos(angle)
      };
    };

    return Math2D;

  })();

  b2Vec2 = Box2D.Common.Math.b2Vec2;

  b2BodyDef = Box2D.Dynamics.b2BodyDef;

  b2Body = Box2D.Dynamics.b2Body;

  b2FixtureDef = Box2D.Dynamics.b2FixtureDef;

  b2Fixture = Box2D.Dynamics.b2Fixture;

  b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape;

  b2CircleShape = Box2D.Collision.Shapes.b2CircleShape;

  b2PrismaticJointDef = Box2D.Dynamics.Joints.b2PrismaticJointDef;

  b2RevoluteJointDef = Box2D.Dynamics.Joints.b2RevoluteJointDef;

  Moto = (function() {
    function Moto(level) {
      this.level = level;
      this.assets = level.assets;
      this.rider = new Rider(level, this);
    }

    Moto.prototype.display = function() {
      this.display_wheel(this.left_wheel);
      this.display_wheel(this.right_wheel);
      this.display_left_axle();
      this.display_right_axle();
      this.display_body();
      return this.rider.display();
    };

    Moto.prototype.init = function() {
      var texture, textures, _i, _len;
      textures = ['front1', 'lowerarm1', 'lowerleg1', 'playerbikerbody', 'playerbikerwheel', 'rear1'];
      for (_i = 0, _len = textures.length; _i < _len; _i++) {
        texture = textures[_i];
        this.assets.moto.push(texture);
      }
      this.player_start = this.level.entities.player_start;
      this.body = this.create_body(this.player_start.x, this.player_start.y + 1.0);
      this.left_wheel = this.create_wheel(this.player_start.x - 0.7, this.player_start.y + 0.48);
      this.right_wheel = this.create_wheel(this.player_start.x + 0.7, this.player_start.y + 0.48);
      this.left_axle = this.create_left_axle(this.player_start.x, this.player_start.y + 1.0);
      this.right_axle = this.create_right_axle(this.player_start.x, this.player_start.y + 1.0);
      this.left_revolute_joint = this.create_left_revolute_joint();
      this.left_prismatic_joint = this.create_left_prismatic_joint();
      this.right_revolute_joint = this.create_right_revolute_joint();
      this.right_prismatic_joint = this.create_right_prismatic_joint();
      return this.rider.init();
    };

    Moto.prototype.position = function() {
      return this.body.GetPosition();
    };

    Moto.prototype.create_body = function(x, y) {
      var b2vertices, body, bodyDef, fixDef;
      fixDef = new b2FixtureDef();
      fixDef.shape = new b2PolygonShape();
      fixDef.density = 1.5;
      fixDef.restitution = 0.5;
      fixDef.friction = 1.0;
      fixDef.filter.groupIndex = -1;
      b2vertices = [new b2Vec2(0.6, -0.3), new b2Vec2(0.6, 0.4), new b2Vec2(-0.7, 0.4), new b2Vec2(-0.7, -0.3)];
      fixDef.shape.SetAsArray(b2vertices);
      bodyDef = new b2BodyDef();
      bodyDef.position.x = x;
      bodyDef.position.y = y;
      bodyDef.type = b2Body.b2_dynamicBody;
      body = this.level.world.CreateBody(bodyDef);
      body.CreateFixture(fixDef);
      return body;
    };

    Moto.prototype.create_wheel = function(x, y) {
      var bodyDef, fixDef, wheel;
      fixDef = new b2FixtureDef();
      fixDef.shape = new b2CircleShape(0.35);
      fixDef.density = 2.0;
      fixDef.restitution = 0.5;
      fixDef.friction = 1.3;
      fixDef.filter.groupIndex = -1;
      bodyDef = new b2BodyDef();
      bodyDef.position.x = x;
      bodyDef.position.y = y;
      bodyDef.type = b2Body.b2_dynamicBody;
      wheel = this.level.world.CreateBody(bodyDef);
      wheel.CreateFixture(fixDef);
      return wheel;
    };

    Moto.prototype.create_left_axle = function(x, y) {
      var b2vertices, body, bodyDef, fixDef;
      fixDef = new b2FixtureDef();
      fixDef.shape = new b2PolygonShape();
      fixDef.density = 1.0;
      fixDef.restitution = 0.5;
      fixDef.friction = 1.0;
      fixDef.filter.groupIndex = -1;
      b2vertices = [new b2Vec2(-0.10, -0.30), new b2Vec2(-0.25, -0.30), new b2Vec2(-0.80, -0.58), new b2Vec2(-0.65, -0.58)];
      fixDef.shape.SetAsArray(b2vertices);
      bodyDef = new b2BodyDef();
      bodyDef.position.x = x;
      bodyDef.position.y = y;
      bodyDef.type = b2Body.b2_dynamicBody;
      body = this.level.world.CreateBody(bodyDef);
      body.CreateFixture(fixDef);
      return body;
    };

    Moto.prototype.create_right_axle = function(x, y) {
      var b2vertices, body, bodyDef, fixDef;
      fixDef = new b2FixtureDef();
      fixDef.shape = new b2PolygonShape();
      fixDef.density = 1.0;
      fixDef.restitution = 0.5;
      fixDef.friction = 1.0;
      fixDef.filter.groupIndex = -1;
      b2vertices = [new b2Vec2(0.58, -0.02), new b2Vec2(0.48, -0.02), new b2Vec2(0.66, -0.58), new b2Vec2(0.76, -0.58)];
      fixDef.shape.SetAsArray(b2vertices);
      bodyDef = new b2BodyDef();
      bodyDef.position.x = x;
      bodyDef.position.y = y;
      bodyDef.type = b2Body.b2_dynamicBody;
      body = this.level.world.CreateBody(bodyDef);
      body.CreateFixture(fixDef);
      return body;
    };

    Moto.prototype.create_left_revolute_joint = function() {
      var jointDef;
      jointDef = new b2RevoluteJointDef();
      jointDef.Initialize(this.left_axle, this.left_wheel, this.left_wheel.GetWorldCenter());
      return this.level.world.CreateJoint(jointDef);
    };

    Moto.prototype.create_right_revolute_joint = function() {
      var jointDef;
      jointDef = new b2RevoluteJointDef();
      jointDef.Initialize(this.right_axle, this.right_wheel, this.right_wheel.GetWorldCenter());
      return this.level.world.CreateJoint(jointDef);
    };

    Moto.prototype.create_left_prismatic_joint = function() {
      var jointDef;
      jointDef = new b2PrismaticJointDef();
      jointDef.Initialize(this.body, this.left_axle, this.left_axle.GetWorldCenter(), new b2Vec2(0.1, 1));
      jointDef.enableLimit = true;
      jointDef.lowerTranslation = -0.10;
      jointDef.upperTranslation = 0.20;
      jointDef.enableMotor = true;
      jointDef.collideConnected = false;
      return this.level.world.CreateJoint(jointDef);
    };

    Moto.prototype.create_right_prismatic_joint = function() {
      var jointDef;
      jointDef = new b2PrismaticJointDef();
      jointDef.Initialize(this.body, this.right_axle, this.right_axle.GetWorldCenter(), new b2Vec2(-0.1, 1));
      jointDef.enableLimit = true;
      jointDef.lowerTranslation = -0.0;
      jointDef.upperTranslation = 0.20;
      jointDef.enableMotor = true;
      jointDef.collideConnected = false;
      return this.level.world.CreateJoint(jointDef);
    };

    Moto.prototype.display_wheel = function(wheel) {
      var angle, position, radius;
      position = wheel.GetPosition();
      radius = wheel.GetFixtureList().GetShape().m_radius;
      angle = wheel.GetAngle();
      this.level.ctx.save();
      this.level.ctx.translate(position.x, position.y);
      this.level.ctx.rotate(angle);
      this.level.ctx.drawImage(this.assets.get('playerbikerwheel'), -radius, -radius, radius * 2, radius * 2);
      return this.level.ctx.restore();
    };

    Moto.prototype.display_body = function() {
      var angle, position;
      position = this.position();
      angle = this.body.GetAngle();
      this.level.ctx.save();
      this.level.ctx.translate(position.x, position.y);
      this.level.ctx.scale(1, -1);
      this.level.ctx.rotate(-angle);
      this.level.ctx.drawImage(this.assets.get('playerbikerbody'), -1.0, -0.5, 2.0, 1.0);
      return this.level.ctx.restore();
    };

    Moto.prototype.display_left_axle = function() {
      var angle, axle_thickness, distance, left_axle_adjusted_position, left_axle_position, left_wheel_position;
      axle_thickness = 0.09;
      left_wheel_position = this.left_wheel.GetPosition();
      left_wheel_position = {
        x: left_wheel_position.x - axle_thickness / 2.0,
        y: left_wheel_position.y - axle_thickness / 2.0 + 0.02
      };
      left_axle_position = {
        x: -0.17,
        y: -0.30
      };
      left_axle_adjusted_position = Math2D.rotate_point(left_axle_position, this.body.GetAngle(), this.position());
      distance = Math2D.distance_between_points(left_wheel_position, left_axle_adjusted_position);
      angle = Math2D.angle_between_points(left_axle_adjusted_position, left_wheel_position) + Math.PI / 2;
      this.level.ctx.save();
      this.level.ctx.translate(left_wheel_position.x, left_wheel_position.y);
      this.level.ctx.scale(1, -1);
      this.level.ctx.rotate(-angle);
      this.level.ctx.drawImage(this.assets.get('front1'), 0.0, -axle_thickness / 2, distance, axle_thickness);
      return this.level.ctx.restore();
    };

    Moto.prototype.display_right_axle = function() {
      var angle, axle_thickness, distance, right_axle_adjusted_position, right_axle_position, right_wheel_position;
      axle_thickness = 0.09;
      right_wheel_position = this.right_wheel.GetPosition();
      right_wheel_position = {
        x: right_wheel_position.x + axle_thickness / 2.0 - 0.03,
        y: right_wheel_position.y - axle_thickness / 2.0
      };
      right_axle_position = {
        x: 0.54,
        y: 0.025
      };
      right_axle_adjusted_position = Math2D.rotate_point(right_axle_position, this.body.GetAngle(), this.position());
      distance = Math2D.distance_between_points(right_wheel_position, right_axle_adjusted_position);
      angle = Math2D.angle_between_points(right_axle_adjusted_position, right_wheel_position) + Math.PI / 2;
      this.level.ctx.save();
      this.level.ctx.translate(right_wheel_position.x, right_wheel_position.y);
      this.level.ctx.scale(1, -1);
      this.level.ctx.rotate(-angle);
      this.level.ctx.drawImage(this.assets.get('front1'), 0.0, -axle_thickness / 2, distance, axle_thickness);
      return this.level.ctx.restore();
    };

    return Moto;

  })();

  b2World = Box2D.Dynamics.b2World;

  b2Vec2 = Box2D.Common.Math.b2Vec2;

  b2AABB = Box2D.Collision.b2AABB;

  b2BodyDef = Box2D.Dynamics.b2BodyDef;

  b2Body = Box2D.Dynamics.b2Body;

  b2FixtureDef = Box2D.Dynamics.b2FixtureDef;

  b2Fixture = Box2D.Dynamics.b2Fixture;

  b2MassData = Box2D.Collision.Shapes.b2MassData;

  b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape;

  b2CircleShape = Box2D.Collision.Shapes.b2CircleShape;

  b2DebugDraw = Box2D.Dynamics.b2DebugDraw;

  b2MouseJointDef = Box2D.Dynamics.Joints.b2MouseJointDef;

  b2Settings = Box2D.Common.b2Settings;

  Physics = (function() {
    function Physics(level) {
      var context, debugDraw;
      this.scale = level.scale.x;
      this.level = level;
      this.world = new b2World(new b2Vec2(0, -10), true);
      b2Settings.b2_linearSlop = 0.0025;
      context = this.level.ctx;
      debugDraw = new b2DebugDraw();
      debugDraw.SetSprite(context);
      debugDraw.SetFillAlpha(0.3);
      debugDraw.SetLineThickness(1.0);
      debugDraw.SetFlags(b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit);
      this.world.SetDebugDraw(debugDraw);
      this.world;
    }

    Physics.prototype.createPolygon = function(vertices) {
      var b2vertices, bodyDef, fixDef, vertex, _i, _len;
      fixDef = new b2FixtureDef();
      fixDef.shape = new b2PolygonShape();
      fixDef.density = 1.0;
      fixDef.restitution = 0.5;
      fixDef.friction = 1.0;
      b2vertices = [];
      for (_i = 0, _len = vertices.length; _i < _len; _i++) {
        vertex = vertices[_i];
        b2vertices.push(new b2Vec2(vertex.x, vertex.y));
      }
      fixDef.shape.SetAsArray(b2vertices);
      bodyDef = new b2BodyDef();
      bodyDef.position.x = 0;
      bodyDef.position.y = 0;
      bodyDef.type = b2Body.b2_staticBody;
      return this.world.CreateBody(bodyDef).CreateFixture(fixDef);
    };

    return Physics;

  })();

  Script = (function() {
    function Script(level) {
      this.level = level;
      this.assets = level.assets;
    }

    Script.prototype.parse = function(xml) {
      var xml_script;
      xml_script = $(xml).find('script');
      this.code = xml_script.text();
      return this;
    };

    Script.prototype.init = function() {};

    Script.prototype.display = function(ctx) {};

    return Script;

  })();

  Sky = (function() {
    function Sky(level) {
      this.level = level;
      this.assets = level.assets;
    }

    Sky.prototype.parse = function(xml) {
      var xml_sky;
      xml_sky = $(xml).find('level info sky');
      this.name = xml_sky.text().toLowerCase();
      this.color_r = parseInt(xml_sky.attr('color_r'));
      this.color_g = parseInt(xml_sky.attr('color_g'));
      this.color_b = parseInt(xml_sky.attr('color_b'));
      this.color_a = parseInt(xml_sky.attr('color_a'));
      this.zoom = parseFloat(xml_sky.attr('zoom'));
      this.offset = parseFloat(xml_sky.attr('offset'));
      if (name === '') {
        this.name = 'sky1';
      }
      return this;
    };

    Sky.prototype.init = function() {
      return this.assets.textures.push(this.name);
    };

    Sky.prototype.display = function(ctx) {
      return ctx.drawImage(this.assets.get(this.name), this.level.limits.screen.left, this.level.limits.screen.bottom, this.level.limits.size.x, this.level.limits.size.y);
    };

    return Sky;

  })();

}).call(this);
